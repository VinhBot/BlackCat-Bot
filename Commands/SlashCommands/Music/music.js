const { ApplicationCommandOptionType, EmbedBuilder, ChannelType, SelectMenuBuilder, ActionRowBuilder, AttachmentBuilder } = require("discord.js");
const Canvas = require('canvas');
module.exports = {
  name: "music", // T√™n l·ªánh 
  description: "ph√°t m·ªôt b√†i h√°t", // M√¥ t·∫£ l·ªánh
  userPerms: [], // quy·ªÅn c·ªßa th√†nh vi√™n c√≥ th·ªÉ s·ª≠ d·ª•ng l·ªánh
  owner: false, // true ƒë·ªÉ chuy·ªÉn th√†nh l·ªánh c·ªßa ch·ªß bot, false ƒë·ªÉ t·∫Øt
  options: [
    {
      name: "lyrics",
      description: "t√¨m ki·∫øm l·ªùi nh·∫°c ƒëang ph√°t",
      type: ApplicationCommandOptionType.Subcommand,
    },{ 
      name: "play",
      description: "ph√°t nh·∫°c theo y√™u c·∫ßu",
      type: ApplicationCommandOptionType.Subcommand,
      options: [{
          name: "name",
          description: "nh·∫≠p t√™n b√†i h√°t ho·∫∑c url b√†i h√°t",
          type: ApplicationCommandOptionType.String,
          required: true,
      }],
    },{
      name: "playmix",
      description: "ph√°t nh·∫°c theo playlist c√≥ s·∫µn",
      type: ApplicationCommandOptionType.Subcommand,
      options: [{
          name: "playlist",
          description: "b·∫°n mu·ªën ph√°t playlist n√†o",
          type: ApplicationCommandOptionType.String,
          required: true,
          choices: [
             { name: "ph√°t nh·∫°c: lofi chill", value: "lofii" },                   
             { name: "ph√°t nh·∫°c: Th·∫•t t√¨nh", value: "thattinh" },
             { name: "ph√°t nh·∫°c: Real love", value: "reallove" },
             { name: "ph√°t nh·∫°c: Gaming", value: "gaming" }, 
          ]
      }],
    },{
      name: "volume",
      description: "TƒÉng gi·∫£m √¢m l∆∞·ª£ng ph√°t nh·∫°c", 
      type: ApplicationCommandOptionType.Subcommand,
      options: [{
          name: "s·ªë_√¢m_l∆∞·ª£ng",
          description: "S·ªë √¢m l∆∞·ª£ng b·∫°n mu·ªën th√™m", 
          type: ApplicationCommandOptionType.Number,
          required: true,
      }],
    },{
      name: "seek",
      description: "T√¨m ki·∫øm v·ªã tr√≠ ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh trong b√†i h√°t", 
      type: ApplicationCommandOptionType.Subcommand,
      options: [{
          name: "s·ªë_gi√¢y",
          description: "Cung c·∫•p m·ªôt v·ªã tr√≠ (t√≠nh b·∫±ng gi√¢y) ƒë·ªÉ t√¨m ki·∫øm.", 
          type: ApplicationCommandOptionType.Number,
          required: true,
      }],
    },{
      name: "settings",
      description: "Ch·ªçn m·ªôt t√πy ch·ªçn theo y√™u c·∫ßu nghe nh·∫°c c·ªßa b·∫°n", 
      type: ApplicationCommandOptionType.Subcommand,
      options: [{
        name: "t√πy_ch·ªçn",
        description: "Ch·ªçn m·ªôt t√πy ch·ªçn.", 
        type: ApplicationCommandOptionType.String, 
        required: true, 
        choices: [
          { name: "üîÑ Chuy·ªÉn ƒë·ªïi ch·∫ø ƒë·ªô t·ª± ƒë·ªông ph√°t", value: "autoPlay"},
          { name: "‚ô®Ô∏è Tham gia k√™nh voice c·ªßa b·∫°n", value: "join"},
          { name: "üî¢ Xem danh s√°ch h√†ng ƒë·ª£i", value: "queue"},
          { name: "‚è≠ B·ªè qua b√†i h√°t", value: "skip"},
          { name: "‚è∏ T·∫°m d·ª´ng b√†i h√°t", value: "pause"},
          { name: "‚èØ Ti·∫øp t·ª•c b√†i h√°t", value: "resume"},
          { name: "‚èπ D·ª´ng nh·∫°c", value: "stop"},
          { name: "üîÄ X√°o tr·ªôn h√†ng ƒë·ª£i", value: "shuffle"},
          { name: "üîº Th√™m m·ªôt b√†i h√°t li√™n quan", value: "relatedSong"},
          { name: "üîÅ Chuy·ªÉn ƒë·ªïi ch·∫ø ƒë·ªô l·∫∑p l·∫°i", value: "repeatMode"},
          { name: "‚èÆ Ph√°t b√†i h√°t tr∆∞·ªõc", value: "previous"},
          { name: "‚è≥ Xem v√†i h√°t hi·ªán t·∫°i ƒëang ph√°t", value: "nowplaying"},
        ],
      }],
    },{
      name: "filters",
      description: "√°p d·ª•ng filters cho tr√¨nh ph√°t nh·∫°c",
      type: ApplicationCommandOptionType.Subcommand,
      options: [{
          name: "set",
          description: "b·∫°n mu·ªën lo·∫°i filters n√†o",
          type: ApplicationCommandOptionType.String,
          required: true,
          choices: [
            { name: "‚ùå T·∫Øt t·∫•t c·∫£ c√°c b·ªô l·ªçc", value: "false" },
            { name: "üì£ Chuy·ªÉn ƒë·ªïi b·ªô l·ªçc: 8d", value: "8d" },
            { name: "üì£ Chuy·ªÉn ƒë·ªïi b·ªô l·ªçc: bassboost", value: "bassboost" },
            { name: "üì£ Chuy·ªÉn ƒë·ªïi b·ªô l·ªçc: echo", value: "echo" },
            { name: "üì£ Chuy·ªÉn ƒë·ªïi b·ªô l·ªçc: nightcore", value: "nightcore" },
            { name: "üì£ Chuy·ªÉn ƒë·ªïi b·ªô l·ªçc: surround", value: "surround" },
            { name: "üì£ Chuy·ªÉn ƒë·ªïi b·ªô l·ªçc: karaoke", value: "karaoke" },
            { name: "üì£ Chuy·ªÉn ƒë·ªïi b·ªô l·ªçc: vaporwave", value: "vaporwave" },
            { name: "üì£ Chuy·ªÉn ƒë·ªïi b·ªô l·ªçc: flanger", value: "flanger" },
            { name: "üì£ Chuy·ªÉn ƒë·ªïi b·ªô l·ªçc: gate", value: "gate" },
            { name: "üì£ Chuy·ªÉn ƒë·ªïi b·ªô l·ªçc: haas", value: "haas" },
            { name: "üì£ Chuy·ªÉn ƒë·ªïi b·ªô l·ªçc: reveser", value: "reverse" },
            { name: "üì£ Chuy·ªÉn ƒë·ªïi b·ªô l·ªçc: mcompand", value: "mcompand" },
            { name: "üì£ Chuy·ªÉn ƒë·ªïi b·ªô l·ªçc: phaser", value: "phaser" },
            { name: "üì£ Chuy·ªÉn ƒë·ªïi b·ªô l·ªçc: tremolo", value: "tremolo" },
            { name: "üì£ Chuy·ªÉn ƒë·ªïi b·ªô l·ªçc: earwax", value: "earwax" }
          ],
      }],
    }
  ],
  run: async(client, interaction) => {
    const { options, member, guild, channel, guildId } = interaction;
    const VoiceChannel = member.voice.channel;
    const test = guild.channels.cache.filter(chnl => (chnl.type == ChannelType.GuildVoice)).find(channel => (channel.members.has(client.user.id)));
    if(!VoiceChannel) return interaction.reply({
      content: "B·∫°n ph·∫£i ·ªü trong m·ªôt k√™nh voice ƒë·ªÉ c√≥ th·ªÉ s·ª≠ d·ª•ng c√°c l·ªánh √¢m nh·∫°c.", 
      ephemeral: true 
    });
    if(test && VoiceChannel.id !== test.id) return interaction.reply({ 
      embeds: [new EmbedBuilder().setDescription(`‚ùå T√¥i ƒë√£ ch∆°i trong <#${test.id}>`)], ephemeral: true
    });
    if(options.getSubcommand() === "play") {
      const Text = options.getString("name");
      await interaction.reply({	content: `üîç ƒêang t√¨m ki·∫øm... \`\`\`${Text}\`\`\`` });
      await client.distube.play(VoiceChannel, Text, {
        textChannel: channel,
        member: member
      });
			interaction.editReply({ content: `${client.distube.getQueue(guildId)?.songs?.length > 0 ? "üëç ƒê√£ th√™m" : "üé∂ ƒêang Ph√°t"}: \`\`\`css\n${Text}\n\`\`\`` });
    } else if(options.getSubcommand() === "playmix") {
      let args = [options.getString("playlist")];
      let link = "https://open.spotify.com/playlist/5ravtOAghdGsfYeKhFx0xU";
		  if(args[0]) {
			  if(args[0].toLowerCase().startsWith(`lofi`)) {
          link = `https://open.spotify.com/playlist/2kLGCKLDSXu7d2VvApmiWg`;
        } else if(args[0].toLowerCase().startsWith(`thattinh`)) {
          link = `https://open.spotify.com/playlist/4Aj61H8LI3OdtHLwEf5wo5`;
        } else if(args[0].toLowerCase().startsWith(`reallove`)) {
          link = `https://open.spotify.com/playlist/7yQiYrVwwV8TgGa1FwhCUl`;
        } else if(args[0].toLowerCase().startsWith(`gaming`)) {
          link = `https://open.spotify.com/playlist/5ravtOAghdGsfYeKhFx0xU`;
        };
			};
		  await interaction.reply({ content: `ƒêang t·∫£i **'${args[0] ? args[0] : "nh·∫°c m·∫∑c ƒë·ªãnh"}'**` });
      let queue = client.distube.getQueue(guildId);
      await client.distube.play(VoiceChannel, link, {
        textChannel: channel,
        member: member
      });
      interaction.editReply({ content: `${queue?.songs?.length > 0 ? "üëç ƒë√£ th√™m" : "üé∂ ƒêang ph√°t"}: **'${args[0] ? args[0] : "m·∫∑c ƒë·ªãnh"}'**`, ephemeral: true });
    } else if(options.getSubcommand() === "volume") {
      const Volume = options.getNumber("s·ªë_√¢m_l∆∞·ª£ng");
      if(Volume > 100 || Volume < 1) return interaction.reply({ content: "B·∫°n ph·∫£i ch·ªâ ƒë·ªãnh m·ªôt s·ªë t·ª´ 1 ƒë·∫øn 100." });
      client.distube.setVolume(VoiceChannel, Volume);
      return interaction.reply({content: `üì∂ √Çm l∆∞·ª£ng ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t th√†nh \`${Volume}%\``, ephemeral: true});
    } else if(options.getSubcommand() === "seek") {
      const queue = await client.distube.getQueue(VoiceChannel);
      const Time = options.getNumber("s·ªë_gi√¢y");
      if(!queue) return interaction.reply({ content: "‚õî Kh√¥ng c√≥ h√†ng ƒë·ª£i", ephemeral: true });
      await queue.seek(Time);
      return interaction.reply({ content: `‚è© **T√¨m ki·∫øm \`${Time}\`**`, ephemeral: true });
    } else if(options.getSubcommand() === "lyrics") {
      const lyricsfinder = require('lyrics-finder');
      try {
        const queue = await client.distube.getQueue(guildId);
        let name = queue.songs.map((song, id) => song.name).slice(0, 1).join("\n");
        let uploader = queue.songs.map((song, id) => song.uploader.name).slice(0, 1).join("\n");
        let thumbnail = queue.songs.map((song, id) => song.thumbnail).slice(0, 1).join("\n");
        let url = queue.songs.map((song, id) => song.url).slice(0, 1).join("\n");
        let lyrics = (await lyricsfinder(uploader, name)) || "Kh√¥ng t√¨m th·∫•y l·ªùi b√†i h√°t!";
        interaction.reply({ embeds: [new EmbedBuilder()
          .setAuthor({ name: name, iconURL: thumbnail, url: url })
          .setColor("Random")
          .setThumbnail(thumbnail)
          .setDescription(lyrics),
        ]});
      } catch(e) {
        return interaction.reply({ content: "B·∫°n c·∫ßn ph·∫£i ph√°t m·ªôt b√†i nh·∫°c n√†o ƒë√≥.", ephemeral: true });
      };
    } else if(options.getSubcommand() === "settings") {
      const option = options.getString("t√πy_ch·ªçn");
      if(option === "join") {
        client.distube.voices.join(VoiceChannel);
        return interaction.reply({ content: "ƒê√£ tham gia k√™nh voice c·ªßa b·∫°n" });                        
      };
      const queue = await client.distube.getQueue(VoiceChannel);
      if(!queue) return interaction.reply({content: "‚õî Kh√¥ng c√≥ h√†ng ƒë·ª£i.", ephemeral: true});
      if(option === "skip") {
        await queue.skip(VoiceChannel);
        return interaction.reply({ content: "‚è≠ B·ªè qua b√†i h√°t.", ephemeral: true});
      } else if(option === "stop") {
        await queue.stop(VoiceChannel);
        return interaction.reply({ content: "‚èπ D·ª´ng ph√°t nh·∫°c", ephemeral: true});
      } else if(option === "pause") {
        await queue.pause(VoiceChannel);
        return interaction.reply({ content: "‚è∏ B√†i h√°t ƒë√£ ƒë∆∞·ª£c t·∫°m d·ª´ng.", ephemeral: true});                      
      } else if(option === "resume") {
        await queue.resume(VoiceChannel);
        return interaction.reply({ content: "‚èØ B√†i h√°t ƒë√£ ƒë∆∞·ª£c ti·∫øp t·ª•c.", ephemeral: true})                            
      } else if(option === "shuffle") {
        await queue.shuffle(VoiceChannel);
        return interaction.reply({ content: "üîÄ H√†ng ƒë·ª£i ƒë√£ b·ªã x√°o tr·ªôn.", ephemeral: true})                                              
      } else if(option === "autoplay") {
        return interaction.reply({ content: `üîÑ Ch·∫ø ƒë·ªô t·ª± ƒë·ªông ph√°t ƒë∆∞·ª£c ƒë·∫∑t th√†nh: ${await queue.toggleAutoplay(VoiceChannel) ? "B·∫≠t" : "T·∫Øt"}`, ephemeral: true});                  
      } else if(option === "relatedSong") {
        await queue.addRelatedSong(VoiceChannel);
        return interaction.reply({ content: "üîº M·ªôt b√†i h√°t li√™n quan ƒë√£ ƒë∆∞·ª£c th√™m v√†o h√†ng ƒë·ª£i.", ephemeral: true});                                      
      } else if(option === "repeatMode") {
        let Mode2 = await client.distube.setRepeatMode(queue);
        return interaction.reply({ content: `üîÅ Ch·∫ø ƒë·ªô L·∫∑p l·∫°i ƒë∆∞·ª£c ƒë·∫∑t th√†nh: ${Mode2 = Mode2 ? Mode2 == 2 ? "Queue" : "Song" : "Off"}`, ephemeral: true});                                           
      } else if(option === "previous") {
        await queue.previous(VoiceChannel);
        return interaction.reply({ content: "‚èÆ Ph√°t b·∫£n nh·∫°c tr∆∞·ªõc.", ephemeral: true});                                           
      } else if(option === "queue") {
        return interaction.reply({ embeds: [new EmbedBuilder().setColor("Purple").setDescription(`${queue.songs.map((song, id) => `\n**${id + 1}**. ${song.name} - \`${song.formattedDuration}\``)}`)], ephemeral: true});                   
      } else if(option === "nowplaying") {
        let newQueue = client.distube.getQueue(guildId);
        if(!newQueue || !newQueue.songs || newQueue.songs.length == 0) return interaction.reply({
		    	embeds: [new EmbedBuilder().setColor("Random").setTitle("Danh s√°ch nh·∫°c tr·ªëng")],
	      });
        let queuesong = newQueue.formattedCurrentTime;
        let cursong = newQueue.songs[0];
        let cursongtimes = 0;
        let cursongtimem = 0;
        let cursongtimeh = 0;
        let queuetimes = 0;
        let queuetimem = 0;
        let queuetimeh = 0;
        if(cursong.formattedDuration.split(":").length === 3) {
          cursongtimes = cursong.formattedDuration.split(":")[2]
          cursongtimem = cursong.formattedDuration.split(":")[1]
          cursongtimeh = cursong.formattedDuration.split(":")[0]
        };
        if(queuesong.split(":").length === 3) {
          queuetimes = queuesong.split(":")[2]
          queuetimem = queuesong.split(":")[1]
          queuetimeh = queuesong.split(":")[0]
        };
        cursongtimes = cursong.formattedDuration.split(":")[1]
        cursongtimem = cursong.formattedDuration.split(":")[0]
        queuetimes = queuesong.split(":")[1]
        queuetimem = queuesong.split(":")[0]
        let maxduration = Number(cursongtimes) + Number(cursongtimem) * 60 + Number(cursongtimeh) * 60 * 60;
        let minduration = Number(queuetimes) + Number(queuetimem) * 60 + Number(queuetimeh) * 60 * 60;
        let percentduration = Math.floor((minduration / maxduration) * 100);
        let songtitle = cursong.name;
        let oftime = `${newQueue.formattedCurrentTime}/${cursong.formattedDuration}`
        const canvas = Canvas.createCanvas(800, 200);
        const ctx = canvas.getContext('2d');
        const background = await Canvas.loadImage("https://cdn.discordapp.com/attachments/1092880002695036950/1103677516016787517/bg.png");
        ctx.drawImage(background, 0, 0, canvas.width, canvas.height);
        const url = `https://img.youtube.com/vi/${cursong.id}/mqdefault.jpg`
        const avatar = await Canvas.loadImage(url);
        ctx.drawImage(avatar, 10, 10, 192, 108);
        var textString = songtitle.substr(0, 35);
        ctx.font = 'bold 40px Genta';
        ctx.fillStyle = '#d625ed';
        ctx.fillText(textString, 10 + 192 + 10, 10 + 25);
        let textStringt
        if (songtitle.length > 40) textStringt = songtitle.substr(35, 32) + "...";
        else textStringt = "";
        ctx.font = 'bold 40px Genta';
        ctx.fillStyle = '#d625ed';
        ctx.fillText(textStringt, 10 + 192 + 10, 10 + 25 + 40);
        ctx.font = 'bold 30px Genta';
        ctx.fillStyle = '#d625ed';
        ctx.fillText(oftime, 10 + 192 + 10, 10 + 25 + 30 + 50);
        let percent = percentduration;
        let index = Math.floor(percent) || 10;
        let left = Number(".".repeat(index).length) * 7.9;
        if(left < 50) left = 50;
        let x = 14;
        let y = 200 - 65;
        let width = left;
        let height = 50;
        let radius = 25;
        if(width < 2 * radius) radius = width / 2;
        if(height < 2 * radius) radius = height / 2;
        ctx.beginPath();
        ctx.moveTo(x + radius, y);
        ctx.arcTo(x + width, y, x + width, y + height, radius);
        ctx.arcTo(x + width, y + height, x, y + height, radius);
        ctx.arcTo(x, y + height, x, y, radius);
        ctx.arcTo(x, y, x + width, y, radius);
        ctx.closePath();
        ctx.fillStyle = '#d625ed';
        ctx.fill();
        const attachment = new AttachmentBuilder(canvas.toBuffer(), {
          name: 'nowplaying.png' 
        });
        return await interaction.reply({ 
          files: [attachment]
        });
      };
    } else if(options.getSubcommand() === "filters") {
      const queue = await client.distube.getQueue(VoiceChannel);
      if(!queue) return interaction.reply({ content: "‚õî Kh√¥ng c√≥ h√†ng ƒë·ª£i", ephemeral: true });
      const toggle = options.getString("set");
      if(toggle === "false") {
        await queue.filters.add(false);
        return interaction.reply({ content: `‚ùé ƒê√£ t·∫Øt t·∫•t c·∫£ b·ªô l·ªçc.`, ephemeral: true });        
      } else if(toggle === "8d") {
        await queue.filters.add(`3d`);
        return interaction.reply({content: `‚úÖ ƒê√£ chuy·ªÉn ƒë·ªïi b·ªô l·ªçc 8D.`, ephemeral: true});                        
      } else if(toggle === "karaoke") {
        await queue.filters.add(`karaoke`);
        return interaction.reply({content: `‚úÖ ƒê√£ chuy·ªÉn ƒë·ªïi b·ªô l·ªçc karaoke.`, ephemeral: true});                         
      } else if(toggle === "vaporwave") {
        await queue.filters.add(`vaporwave`);
        return interaction.reply({content: `‚úÖ ƒê√£ chuy·ªÉn ƒë·ªïi b·ªô l·ªçc vaporwave.`, ephemeral: true});   
      } else if(toggle === "flanger") {
        await queue.filters.add(`flanger`);
        return interaction.reply({content: `‚úÖ ƒê√£ chuy·ªÉn ƒë·ªïi b·ªô l·ªçc flanger.`, ephemeral: true});                      
      } else if(toggle === "gate") {
        await queue.filters.add(`gate`);
        return interaction.reply({content: `‚úÖ ƒê√£ chuy·ªÉn ƒë·ªïi b·ªô l·ªçc gate.`, ephemeral: true});                        
      } else if(toggle === "haas") {
        await queue.filters.add(`haas`);
        return interaction.reply({content: `‚úÖ ƒê√£ chuy·ªÉn ƒë·ªïi b·ªô l·ªçc haas.`, ephemeral: true});                        
      } else if(toggle === "reverse") {
        await queue.filters.add(`reverse`);
        return interaction.reply({content: `‚úÖ ƒê√£ chuy·ªÉn ƒë·ªïi b·ªô l·ªçc reverse.`, ephemeral: true});   
      } else if(toggle === "mcompand") {
        await queue.filters.add(`mcompand`);
        return interaction.reply({content: `‚úÖ ƒê√£ chuy·ªÉn ƒë·ªïi b·ªô l·ªçc mcompand.`, ephemeral: true });                        
      } else if(toggle === "phaser") {
        await queue.filters.add(`phaser`);
        return interaction.reply({content: `‚úÖ ƒê√£ chuy·ªÉn ƒë·ªïi b·ªô l·ªçc phaser.`, ephemeral: true});                        
      } else if(toggle === "tremolo") {
        await queue.filters.add(`tremolo`);
        return interaction.reply({content: `‚úÖ ƒê√£ chuy·ªÉn ƒë·ªïi b·ªô l·ªçc tremolo.`, ephemeral: true});                      
      } else if(toggle === "earwax") {
        await queue.filters.add(`earwax`);
        return interaction.reply({content: `‚úÖ ƒê√£ chuy·ªÉn ƒë·ªïi b·ªô l·ªçc earwax.`, ephemeral: true});        
      } else if(toggle === "bassboost") {
        await queue.filters.add(`bassboost`);
        return interaction.reply({content: `‚úÖ ƒê√£ chuy·ªÉn ƒë·ªïi b·ªô l·ªçc bassboost.`, ephemeral: true});
      } else if(toggle === "echo") {
        await queue.filters.add(`echo`);
        return interaction.reply({content: `‚úÖ ƒê√£ chuy·ªÉn ƒë·ªïi b·ªô l·ªçc echo.`, ephemeral: true});                  
      } else if(toggle === "nightcore") {
        await queue.filters.add(`nightcore`);
        return interaction.reply({content: `‚úÖ ƒê√£ chuy·ªÉn ƒë·ªïi b·ªô l·ªçc nightcore.`, ephemeral: true});                      
      } else if(toggle === "surround") {
        await queue.filters.add(`surround`);
        return interaction.reply({content: `‚úÖ ƒê√£ chuy·ªÉn ƒë·ªïi b·ªô l·ªçc surround.`, ephemeral: true});   
      };
    };
  },
};