const { ApplicationCommandOptionType, EmbedBuilder, ActionRowBuilder, ButtonBuilder, StringSelectMenuBuilder } = require("discord.js");
module.exports = {
  name: "setup", // T√™n l·ªánh 
  description: "Thi·∫øt l·∫≠p commands", // M√¥ t·∫£ l·ªánh
  userPerms: ["Administrator"], // quy·ªÅn c·ªßa th√†nh vi√™n c√≥ th·ªÉ s·ª≠ d·ª•ng l·ªánh
  owner: false, // true ƒë·ªÉ chuy·ªÉn th√†nh l·ªánh c·ªßa ch·ªß bot, false ƒë·ªÉ t·∫Øt
  cooldown: 3, // th·ªùi gian h·ªìi l·ªánh
  options: [
    { 
      name: "music", 
      description: "Thi·∫øt l·∫≠p h·ªá th·ªëng √¢m nh·∫°c d√†nh cho guilds", 
      type: ApplicationCommandOptionType.Subcommand, 
      options: [{
        name: "channel", 
        description: "K√™nh vƒÉn b·∫£n b·∫°n mu·ªën thi·∫øt l·∫≠p", 
        type: ApplicationCommandOptionType.Channel,
        required: true
      }],
    },
  ],
  run: async(client, interaction) => {
     if(interaction.options.getSubcommand() === "music") {
      var Emojis = [`0Ô∏è‚É£`, `1Ô∏è‚É£`, `2Ô∏è‚É£`, `3Ô∏è‚É£`, `4Ô∏è‚É£`, `5Ô∏è‚É£`, `6Ô∏è‚É£`, `7Ô∏è‚É£`, `8Ô∏è‚É£`, `9Ô∏è‚É£`, `üîü`, `üü•`,`üüß`, `üü®`, `üü©`, `üü¶`, `üü™`, `üü´`];
      let channel = interaction.options.getChannel("channel");
      channel.send({ embeds: [new EmbedBuilder()
        .setColor("Random")
        .setTitle(`üìÉ h√†ng ƒë·ª£i c·ªßa __${interaction.guild.name}__`)
        .setDescription(`**Hi·ªán t·∫°i c√≥ __0 B√†i h√°t__ trong H√†ng ƒë·ª£i**`)
        .setThumbnail(interaction.guild.iconURL({ dynamic: true })),
        new EmbedBuilder()
        .setColor("Random")
        .setFooter({ text: interaction.guild.name, iconURL: interaction.guild.iconURL({ dynamic: true }) })
        .setImage(interaction.guild.banner ? interaction.guild.bannerURL({ size: 4096 }) : "https://i.pinimg.com/originals/72/97/52/729752d06f814ebfbcc9a35215e2b897.jpg")
        .setTitle(`B·∫Øt ƒë·∫ßu nghe nh·∫°c, b·∫±ng c√°ch k·∫øt n·ªëi v·ªõi K√™nh tho·∫°i v√† g·ª≠i **LI√äN K·∫æT B√ÄI H√ÅT** ho·∫∑c **T√äN B√ÄI H√ÅT** trong K√™nh n√†y!`)
        .setDescription(`> *T√¥i h·ªó tr·ª£ Youtube, Spotify, Soundcloud v√† c√°c li√™n k·∫øt MP3 tr·ª±c ti·∫øp!*`)
      ], components: [new ActionRowBuilder().addComponents([
        new StringSelectMenuBuilder().setCustomId(`StringSelectMenuBuilder`).addOptions([`Pop`, `Strange-Fruits`, `Gaming`, `Chill`, `Rock`, `Jazz`, `Blues`, `Metal`, `Magic-Release`, `NCS | No Copyright Music`, `Default`].map((t, index) => {
            return {
              label: t.substr(0, 25),
              value: t.substr(0, 25),
              description: `T·∫£i Danh s√°ch ph√°t nh·∫°c: '${t}'`.substr(0, 50),
              emoji: Emojis[index]
            };
          }))
        ]),
        new ActionRowBuilder().addComponents([
          new ButtonBuilder().setStyle('Primary').setCustomId('Skip').setEmoji(`‚è≠`).setLabel(`Skip`).setDisabled(),
          new ButtonBuilder().setStyle('Danger').setCustomId("1").setEmoji(`üè†`).setLabel(`Stop`).setDisabled(),
          new ButtonBuilder().setStyle('Secondary').setCustomId('Pause').setEmoji('‚è∏').setLabel(`Pause`).setDisabled(),
          new ButtonBuilder().setStyle('Success').setCustomId('Autoplay').setEmoji('üîÅ').setLabel(`Autoplay`).setDisabled(),
          new ButtonBuilder().setStyle('Primary').setCustomId('Shuffle').setEmoji('üîÄ').setLabel(`Shuffle`).setDisabled(),
        ]),
        new ActionRowBuilder().addComponents([
          new ButtonBuilder().setStyle('Success').setCustomId('Song').setEmoji(`üîÅ`).setLabel(`Song`).setDisabled(),
          new ButtonBuilder().setStyle('Success').setCustomId('Queue').setEmoji(`üîÇ`).setLabel(`Queue`).setDisabled(),
          new ButtonBuilder().setStyle('Primary').setCustomId('Forward').setEmoji('‚è©').setLabel(`+10 Sec`).setDisabled(),
          new ButtonBuilder().setStyle('Primary').setCustomId('Rewind').setEmoji('‚è™').setLabel(`-10 Sec`).setDisabled(),
          new ButtonBuilder().setStyle('Primary').setCustomId('Lyrics').setEmoji('üìù').setLabel(`Lyrics`).setDisabled(),
        ]),
      ]}).then(async(msg) => {
        await client.createSetup(interaction, channel.id, msg.id);
        return interaction.reply({ content: ` **Thi·∫øt l·∫≠p th√†nh c√¥ng H·ªá th·ªëng √Çm nh·∫°c trong:** <#${channel.id}>` });
      });
    };
  },
};