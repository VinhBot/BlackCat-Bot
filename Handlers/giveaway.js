const { EmbedBuilder, ActionRowBuilder, ButtonBuilder, ModalBuilder, TextInputBuilder, ChannelType, ButtonStyle, TextInputStyle, ComponentType } = require("discord.js");
const { GiveawaysManager } = require("discord-giveaways");
const { Database } = require("st.db");
const ms = require("enhanced-ms");
const giveawayDB = new Database("./Assets/Database/giveaways.json", { 
  databaseInObject: true 
});

const GiveawaysHandlers = class extends GiveawaysManager {
  constructor(client) {
    super(client, {
      /*========================================================
      * @property {string} [storage='./giveaways.json'] ƒê∆∞·ªùng d·∫´n l∆∞u tr·ªØ giveaway.
      * @property {number} [forceUpdateEvery=null] Bu·ªôc c·∫≠p nh·∫≠t th√¥ng b√°o giveaway trong m·ªôt kho·∫£ng th·ªùi gian c·ª• th·ªÉ.
      * @property {number} [endedGiveawaysLifetime=null] S·ªë mili gi√¢y sau ƒë√≥ giveaway k·∫øt th√∫c s·∫Ω b·ªã x√≥a kh·ªèi DB. ‚ö† giveaway ƒë√£ x√≥a kh·ªèi DB kh√¥ng th·ªÉ ƒë∆∞·ª£c roll l·∫°i n·ªØa!
      * @property {Object} [default] C√°c t√πy ch·ªçn m·∫∑c ƒë·ªãnh cho giveaway m·ªõi.
      * @property {boolean} [default.botsCanWin=false] N·∫øu bot c√≥ th·ªÉ gi√†nh ƒë∆∞·ª£c giveaway.
      * @property {Discord.PermissionResolvable[]} [default.exemptPermissions=[]] Th√†nh vi√™n c√≥ b·∫•t k·ª≥ quy·ªÅn n√†o trong s·ªë n√†y s·∫Ω kh√¥ng th·ªÉ gi√†nh ƒë∆∞·ª£c giveaway.
      * @property {ExemptMembersFunction} [default.exemptMembers] Ch·ª©c nƒÉng l·ªçc th√†nh vi√™n. N·∫øu gi√° tr·ªã true ƒë∆∞·ª£c tr·∫£ v·ªÅ, th√†nh vi√™n ƒë√≥ s·∫Ω kh√¥ng th·ªÉ gi√†nh ƒë∆∞·ª£c giveaway.
      * @property {Discord.ColorResolvable} [default.embedColor='#FF0000'] M√†u s·∫Øc c·ªßa giveaway embed khi ƒëang ch·∫°y.
      * @property {Discord.ColorResolvable} [default.embedColorEnd='#000000'] M√†u c·ªßa giveaway ƒë∆∞·ª£c embed khi ch√∫ng k·∫øt th√∫c.
      * @property {Discord.EmojiIdentifierResolvable} [default.reaction='üéÅ'] Ph·∫£n ·ª©ng khi mu·ªën tham gia giveaway.
      ========================================================*/
      storage: false, // `${process.cwd()}/Assets/Database/giveawayDatabase.json`, // (N·∫øu nh∆∞ c√≥ hi·ªán t∆∞·ª£ng bot lag th√¨ m·ªü c√°i n√†y l√™n v√†o giveawayDatabase.json xo√° s·∫°ch d·ªØ li·ªáu r·ªìi th√™m d·∫•u [] v√†o);
      forceUpdateEvery: null,
      endedGiveawaysLifetime: null,
      default: {
        botsCanWin: false,
        exemptPermissions: [],
        exemptMembers: () => false,
        embedColor: 'Yellow',
        embedColorEnd: 'Red',
        reaction: '<a:hehehe:1091770710915022858>'
      },
    });
    /**
    * t√πy ch·ªçn tin nh·∫Øn m·∫∑c ƒë·ªãnh khi ch·∫°y giveaway
    */
    this.optionalDefault =  {
      thumbnail: "https://imgur.io/4FGhUuk.gif",
      // image: "",
      messages: {
        title: 'Ph·∫ßn th∆∞·ªüng:\n{this.prize}',
        drawing: 'K·∫øt th√∫c sau: {timestamp}',
        dropMessage: 'H√£y l√† ng∆∞·ªùi ƒë·∫ßu ti√™n ph·∫£n ·ª©ng v·ªõi üéÅ!',
        inviteToParticipate: 'Ph·∫£n ·ª©ng v·ªõi üéÅ ƒë·ªÉ tham gia!',
        embedFooter: '{this.winnerCount} ng∆∞·ªùi chi·∫øn th·∫Øng',
        noWinner: 'Giveaway b·ªã h·ªßy, kh√¥ng c√≥ ng∆∞·ªùi tham gia h·ª£p l·ªá.',
        hostedBy: 'T·ªï ch·ª©c b·ªüi: {this.hostedBy}',
        winners: 'Ng∆∞·ªùi chi·∫øn th·∫Øng:',
        endedAt: 'ƒê√£ k·∫øt th√∫c'
      },
      lastChance: { // H·ªá th·ªëng c∆° h·ªôi cu·ªëi c√πng 
        enabled: true, // n·∫øu h·ªá th·ªëng c∆° h·ªôi cu·ªëi c√πng ƒë∆∞·ª£c b·∫≠t.
        content: '‚ö†Ô∏è **C∆† H·ªòI CU·ªêI C√ôNG ƒê·ªÇ THAM GIA!** ‚ö†Ô∏è', // VƒÉn b·∫£n embed
        threshold: 10000, // s·ªë mili gi√¢y tr∆∞·ªõc khi giveaways k·∫øt th√∫c.
        embedColor: 'Random' // m√†u c·ªßa embed.
      },
      pauseOptions: {
        isPaused: false, // n·∫øu embed b·ªã t·∫°m d·ª´ng.
        content: '‚ö†Ô∏è **GIVEAWAY N√ÄY ƒê√É T·∫†M D·ª™NG!** ‚ö†Ô∏è', // vƒÉn b·∫£n embed
        unpauseAfter: null, // s·ªë mili gi√¢y ho·∫∑c d·∫•u th·ªùi gian t√≠nh b·∫±ng mili gi√¢y, sau ƒë√≥ giveaway s·∫Ω t·ª± ƒë·ªông b·ªè t·∫°m d·ª´ng.
        embedColor: 'Random', // m√†u embed
        infiniteDurationText: '`KH√îNG BAO GI·ªú`' // VƒÉn b·∫£n ƒë∆∞·ª£c hi·ªÉn th·ªã b√™n c·∫°nh GiveawayMessages#drawing ph·∫ßn embed b·ªã t·∫°m d·ª´ng, khi kh√¥ng c√≥ unpauseAfter.
      }
    };
  };
  /*========================================================
  # m·ªôt s·ªë events üíæ
  ========================================================*/
  // H√†m n√†y ƒë∆∞·ª£c g·ªçi khi ng∆∞·ªùi qu·∫£n l√Ω c·∫ßn l·∫•y t·∫•t c·∫£ giveaway ƒë∆∞·ª£c l∆∞u tr·ªØ trong c∆° s·ªü d·ªØ li·ªáu.
  async getAllGiveaways() {
    // L·∫•y t·∫•t c·∫£ giveaway t·ª´ c∆° s·ªü d·ªØ li·ªáu
    return giveawayDB.valuesAll();
  };
  // H√†m n√†y ƒë∆∞·ª£c g·ªçi khi m·ªôt giveaway c·∫ßn ƒë∆∞·ª£c l∆∞u trong c∆° s·ªü d·ªØ li·ªáu.
  async saveGiveaway(messageId, giveawayData) {
    // Th√™m giveaway m·ªõi v√†o c∆° s·ªü d·ªØ li·ªáu
    giveawayDB.set(messageId, giveawayData);
    return true;
  };
  // H√†m n√†y ƒë∆∞·ª£c g·ªçi khi c·∫ßn ch·ªânh s·ª≠a giveaway trong c∆° s·ªü d·ªØ li·ªáu.
  async editGiveaway(messageId, giveawayData) {
    // Thay th·∫ø giveaway ch∆∞a ch·ªânh s·ª≠a b·∫±ng giveaway ƒë√£ ch·ªânh s·ª≠a
    giveawayDB.set(messageId, giveawayData);
    return true;
  };
  // H√†m n√†y ƒë∆∞·ª£c g·ªçi khi c·∫ßn x√≥a giveaway kh·ªèi c∆° s·ªü d·ªØ li·ªáu.
  async deleteGiveaway(messageId) {
    // X√≥a giveaway kh·ªèi c∆° s·ªü d·ªØ li·ªáu
    giveawayDB.delete(messageId);
    return true;
  };
  /*========================================================
  # T·∫°o embed ƒë∆∞·ª£c hi·ªÉn th·ªã khi giveaway ƒëang ch·∫°y (v·ªõi th·ªùi gian c√≤n l·∫°i)
  # @param {boolean} [lastChanceEnabled=false] C√≥ hay kh√¥ng bao g·ªìm vƒÉn b·∫£n c∆° h·ªôi cu·ªëi c√πng
  ========================================================*/
  generateMainEmbed(giveaways, lastChanceEnabled = false) {
    const giveaway = this.optionalDefault;
    const embed = new EmbedBuilder()
    embed.setTitle(typeof giveaway.messages.title === 'string' ? giveaway.messages.title : giveaways.prize);
    embed.setColor(giveaways.isDrop ? giveaways.embedColor : giveaway.pauseOptions.isPaused && giveaway.pauseOptions.embedColor ? giveaway.pauseOptions.embedColor : lastChanceEnabled ? giveaway.lastChance.embedColor : giveaways.embedColor);
    embed.setFooter({ text: giveaway.messages.embedFooter.text ?? (typeof giveaway.messages.embedFooter === 'string' ? giveaway.messages.embedFooter : ''), iconURL: giveaway.messages.embedFooter.iconURL });
    embed.setDescription(giveaways.isDrop ? giveaway.messages.dropMessage : (giveaway.pauseOptions.isPaused ? giveaway.pauseOptions.content + '\n\n' : lastChanceEnabled ? giveaway.lastChance.content + '\n\n' : '') + giveaway.messages.inviteToParticipate + '\n' + giveaway.messages.drawing.replace('{timestamp}', giveaways.endAt === Infinity ? giveaway.pauseOptions.infiniteDurationText : `<t:${Math.round(giveaways.endAt / 1000)}:R>`) + (giveaways.hostedBy ? '\n' + giveaway.messages.hostedBy : ''));
    embed.setThumbnail(giveaway.thumbnail);
    embed.setImage(giveaway.image);
    if(giveaways.endAt !== Infinity) {
      embed.setTimestamp(giveaways.endAt);
    };
    return giveaways.fillInEmbed(embed);
  };
  /*========================================================
  # T·∫°o embed ƒë∆∞·ª£c hi·ªÉn th·ªã khi giveaway k·∫øt th√∫c (v·ªõi danh s√°ch ng∆∞·ªùi chi·∫øn th·∫Øng)
  # @param {Discord.GuildMember[]} ng∆∞·ªùi h√∫p ƒë∆∞·ª£c giveaway
  ========================================================*/
  generateEndEmbed(giveaways, winners) {
    let formattedWinners = winners.map((w) => `${w}`).join(', ');
    const giveaway = this.optionalDefault;
    const strings = {
      winners: giveaways.fillInString(giveaway.messages.winners),
      hostedBy: giveaways.fillInString(giveaway.messages.hostedBy),
      endedAt: giveaways.fillInString(giveaway.messages.endedAt),
      title: giveaways.fillInString(giveaway.messages.title) ?? giveaways.fillInString(giveaways.prize)
    };
    const descriptionString = (formattedWinners) => strings.winners + ' ' + formattedWinners + (giveaways.hostedBy ? '\n' + strings.hostedBy : '');
    for (let i = 1; descriptionString(formattedWinners).length > 4096 || strings.title.length + strings.endedAt.length + descriptionString(formattedWinners).length > 6000; i++) {
      formattedWinners = formattedWinners.slice(0, formattedWinners.lastIndexOf(', <@')) + `, ${i} more`;
    };
    return new EmbedBuilder()
      .setTitle(strings.title)
      .setColor(giveaways.embedColorEnd) 
      .setFooter({ text: strings.endedAt, iconURL: giveaway.messages.embedFooter.iconURL })
      .setDescription(descriptionString(formattedWinners))
      .setTimestamp(giveaways.endAt)
      .setThumbnail(giveaway.thumbnail)
      .setImage(giveaway.image);
  };
  /*========================================================
  # T·∫°o embed ƒë∆∞·ª£c hi·ªÉn th·ªã khi giveaway k·∫øt th√∫c v√† khi kh√¥ng c√≥ ng∆∞·ªùi tham gia h·ª£p l·ªá
  ========================================================*/
  generateNoValidParticipantsEndEmbed(giveaways) {
    const giveaway = this.optionalDefault;
    return giveaways.fillInEmbed(new EmbedBuilder()
    .setTitle(typeof giveaway.messages.title === 'string' ? giveaway.messages.title : giveaways.prize)
    .setColor(giveaways.embedColorEnd)
    .setFooter({ text: giveaway.messages.endedAt, iconURL: giveaway.messages.embedFooter.iconURL })
    .setDescription(giveaway.messages.noWinner + (giveaways.hostedBy ? '\n' + giveaway.messages.hostedBy : ''))
    .setTimestamp(giveaways.endAt)
    .setThumbnail(giveaway.thumbnail)
    .setImage(giveaway.image));
  };
  /*========================================================
  # runModalSetup /
  ========================================================*/
  async runModalSetup(message, targetCh) {
    const { member, channel, guild } = message;
    if(!targetCh) return channel.send("Thi·∫øt l·∫≠p giveaway ƒë√£ b·ªã h·ªßy. B·∫°n ƒë√£ kh√¥ng ƒë·ªÅ c·∫≠p ƒë·∫øn m·ªôt k√™nh");
    if(!targetCh.type === ChannelType.GuildText && !targetCh.permissionsFor(guild.members.me).has(["ViewChannel", "SendMessages", "EmbedLinks"])) return channel.send({
      content: `Thi·∫øt l·∫≠p giveaway ƒë√£ b·ªã h·ªßy.\nt√¥i c·∫ßn quy·ªÅn admin trong ${targetCh}`
    });
    const sentMsg = await channel.send({
       content: "Vui l√≤ng nh·∫•p v√†o n√∫t b√™n d∆∞·ªõi ƒë·ªÉ thi·∫øt l·∫≠p giveaway m·ªõi",
       components: [new ActionRowBuilder().addComponents(new ButtonBuilder().setCustomId("giveaway_btnSetup").setLabel("thi·∫øt l·∫≠p Giveaway").setStyle(ButtonStyle.Primary))],
    });
    if(!sentMsg) return;
    const btnInteraction = await channel.awaitMessageComponent({
      componentType: ComponentType.Button,
      filter: (i) => i.customId === "giveaway_btnSetup" && i.member.id === member.id && i.message.id === sentMsg.id,
      time: 20000,
    }).catch((ex) => console.log(ex));
    if(!btnInteraction) return sentMsg.edit({ 
      content: "Kh√¥ng nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi, ƒëang h·ªßy thi·∫øt l·∫≠p",
      components: [] 
    });
    // c√°c t√πy ch·ªçn modal
    await btnInteraction.showModal(new ModalBuilder({
      customId: "giveaway-modalSetup",
      title: "Thi·∫øt l·∫≠p Giveaway",
      components: [
        new ActionRowBuilder().addComponents(new TextInputBuilder().setCustomId("duration").setLabel("th·ªùi l∆∞·ª£ng l√† bao l√¢u?").setPlaceholder("1m/1h/1d/1w").setStyle(TextInputStyle.Short).setRequired(true)),
        new ActionRowBuilder().addComponents(new TextInputBuilder().setCustomId("prize").setLabel("Gi·∫£i th∆∞·ªüng l√† g√¨?").setStyle(TextInputStyle.Short).setRequired(true)),
        new ActionRowBuilder().addComponents(new TextInputBuilder().setCustomId("winners").setLabel("S·ªë ng∆∞·ªùi chi·∫øn th·∫Øng?").setStyle(TextInputStyle.Short).setRequired(true)),
      ],
    }));
    // 
    const modal = await btnInteraction.awaitModalSubmit({
      time: 1 * 60 * 1000,
      filter: (m) => m.customId === "giveaway-modalSetup" && m.member.id === member.id && m.message.id === sentMsg.id,
    }).catch((ex) => console.log(ex));
    // n·∫øu nh∆∞ kh√¥ng nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi h·ª£p l·ªá, h·ªßy thi·∫øt l·∫≠p :))
    if(!modal) return sentMsg.edit({ content: "Kh√¥ng nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi, ƒëang h·ªßy thi·∫øt l·∫≠p", components: [] });
    // xo√° sentMsg tr∆∞·ªõc ƒë√≥ n·∫øu ƒë√£ ƒë∆∞·ª£c thi·∫øt l·∫≠p
    sentMsg.delete().catch(() => {});
    // thoing b√°o thi·∫øt l·∫≠p
    await modal.reply("Thi·∫øt l·∫≠p giveaway...");
    // th·ªùi gian 
    const duration = ms(modal.fields.getTextInputValue("duration"));
    if(isNaN(duration)) return modal.editReply("Thi·∫øt l·∫≠p ƒë√£ b·ªã h·ªßy b·ªè. B·∫°n ƒë√£ kh√¥ng ch·ªâ ƒë·ªãnh th·ªùi h·∫°n h·ª£p l·ªá");
    // ph·∫ßn th∆∞·ªüng
    const prize = modal.fields.getTextInputValue("prize");
    // s·ªë ng∆∞·ªùi chi·∫øn th·∫Øng
    const winners = parseInt(modal.fields.getTextInputValue("winners"));
    if(isNaN(winners)) return modal.editReply("Thi·∫øt l·∫≠p ƒë√£ b·ªã h·ªßy. B·∫°n kh√¥ng ch·ªâ ƒë·ªãnh s·ªë l∆∞·ª£ng ng∆∞·ªùi chi·∫øn th·∫Øng h·ª£p l·ªá");
    //
    try {
      const options = {
        duration: duration,
        prize,
        winnerCount: winners,
        hostedBy: `<@${message.author ? message.author.id : message.user.id}>`,
        messages: {
          giveaway: 'üéâüéâ **B·∫Øt ƒë·∫ßu Giveaways** üéâüéâ',
          giveawayEnded: 'üéâüéâ **Giveaways ƒë√£ k·∫øt th√∫c** üéâüéâ',
          winMessage: 'Ch√∫c m·ª´ng, {winners}! B·∫°n ƒë√£ th·∫Øng **{this.prize}**!\nVui l√≤ng li√™n h·ªá v·ªõi ch·ªß sever ƒë·ªÉ nh·∫≠n gi·∫£i',
        }
      };
      await this.start(targetCh, options);
    } catch(error) {
      console.log(error);
      return message.reply({ content: `ƒê√£ x·∫£y ra l·ªói khi b·∫Øt ƒë·∫ßu giveaway: ${error}` });
    };
    await modal.editReply(`Giveaways ƒë√£ ƒë∆∞·ª£c b·∫Øt ƒë·∫ßu trong ${targetCh}`);
  };
  // ch·ªânh s·ª≠a giveaway
  async runModalEdit(message, messageId) {
    const { member, channel } = message;
    if(!messageId) return message.reply({ content: "B·∫°n ph·∫£i cung c·∫•p id tin nh·∫Øn h·ª£p l·ªá." });
    const giveaway = this.giveaways.find((g) => g.messageId === messageId && g.guildId === member.guild.id);
    if(!giveaway) return message.reply({ content: `Kh√¥ng th·ªÉ t√¨m th·∫•y giveaway cho messageId: ${messageId}` });
    const sentMsg = await channel.send({
      content: "Vui l√≤ng nh·∫•p v√†o n√∫t b√™n d∆∞·ªõi ƒë·ªÉ ch·ªânh s·ª≠a giveaway",
      components: [new ActionRowBuilder().addComponents(new ButtonBuilder().setCustomId("giveaway_btnEdit").setLabel("Ch·ªânh s·ª≠a Giveaway").setStyle(ButtonStyle.Primary))],
    });
    const btnInteraction = await channel.awaitMessageComponent({
      componentType: ComponentType.Button,
      filter: (i) => i.customId === "giveaway_btnEdit" && i.member.id === member.id && i.message.id === sentMsg.id,
      time: 20000,
    }).catch((ex) => {});
    if(!btnInteraction) return sentMsg.edit({ content: "Kh√¥ng nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi, h·ªßy c·∫≠p nh·∫≠t", components: [] });
    // ph∆∞∆°ng th·ª©c hi·ªÉn th·ªã
    await btnInteraction.showModal(new ModalBuilder({
      customId: "giveaway-modalEdit",
      title: "C·∫≠p nh·∫≠t Giveaway",
      components: [
        new ActionRowBuilder().addComponents(new TextInputBuilder().setCustomId("duration").setLabel("Th·ªùi gian ƒë·ªÉ th√™m").setPlaceholder("1h / 1d / 1w").setStyle(TextInputStyle.Short).setRequired(false)),
        new ActionRowBuilder().addComponents(new TextInputBuilder().setCustomId("prize").setLabel("gi·∫£i th∆∞·ªüng m·ªõi l√† g√¨?").setStyle(TextInputStyle.Short).setRequired(false)),
        new ActionRowBuilder().addComponents(new TextInputBuilder().setCustomId("winners").setLabel("Number of winners?").setStyle(TextInputStyle.Short).setRequired(false)),
      ],
    }));
    // nh·∫≠n ƒë·∫ßu v√†o ph∆∞∆°ng th·ª©c
    const modal = await btnInteraction.awaitModalSubmit({
      time: 1 * 60 * 1000,
      filter: (m) => m.customId === "giveaway-modalEdit" && m.member.id === member.id && m.message.id === sentMsg.id,
    }).catch((ex) => {});
    if(!modal) return sentMsg.edit({ content: "Kh√¥ng nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi, h·ªßy c·∫≠p nh·∫≠t", components: [] });
    sentMsg.delete().catch(() => {});
    await modal.reply("C·∫≠p nh·∫≠t giveaway...");
    // th·ªùi gian
    const addDuration = ms(modal.fields.getTextInputValue("duration"));
    if(isNaN(addDuration)) return modal.editReply("C·∫≠p nh·∫≠t ƒë√£ b·ªã h·ªßy b·ªè. B·∫°n ƒë√£ kh√¥ng ch·ªâ ƒë·ªãnh th·ªùi l∆∞·ª£ng th√™m h·ª£p l·ªá");
    // ph·∫ßn th∆∞·ªüng
    const newPrize = modal.fields.getTextInputValue("prize");
    // s·ªë ng∆∞·ªùi chi·∫øn th·∫Øng
    const newWinnerCount = parseInt(modal.fields.getTextInputValue("winners"));
    if(isNaN(newWinnerCount)) return modal.editReply("C·∫≠p nh·∫≠t ƒë√£ b·ªã h·ªßy b·ªè. B·∫°n ƒë√£ kh√¥ng ch·ªâ ƒë·ªãnh s·ªë l∆∞·ª£ng ng∆∞·ªùi chi·∫øn th·∫Øng h·ª£p l·ªá");
    // edit
    try {
      await this.edit(messageId, {
        addTime: addDuration || 0,
        newPrize: newPrize || giveaway.prize,
        newWinnerCount: newWinnerCount || giveaway.winnerCount,
      });
    } catch(error) {
      return message.reply({ content: `ƒê√£ x·∫£y ra l·ªói khi c·∫≠p nh·∫≠t giveaway: ${error.message}` });
    };
    await modal.editReply("ƒê√£ c·∫≠p nh·∫≠t th√†nh c√¥ng giveaway!");
  };
};

module.exports = (client) => {
  const giveawayHandler = new GiveawaysHandlers(client);
  // g·ªüi tin nh·∫Øn ƒë·∫øn cho ng∆∞·ªùi chi·∫øn th·∫Øng 
  giveawayHandler.on("giveawayRerolled", (giveaway, winners) => {
     winners.forEach((member) => {
       member.send({ embeds: [new EmbedBuilder() 
          .setTile("üéâ„ÉªGiveaway ƒë√£ k·∫øt th√∫c")
          .setDescription(`Xin ch√∫c m·ª´ng ${member.user.username}! B·∫°n ƒë√£ tr·ªü th√†nh ng∆∞·ªùi chi·∫øn th·∫Øng!`)
          .addFields(
            { name: "üéÅ‚îÜ Ph·∫ßn th∆∞·ªüng", value: `${giveaway.prize}`, inline: true },
            { name: "ü•≥‚îÜ Giveaway", value: `[B·∫•m v√†o ƒë√¢y](https://discordapp.com/channels/${giveaway.message.guildId}/${giveaway.message.channelId}/${giveaway.message.id})`, inline: true }
          )
       ]}).catch((ex) => console.log(ex));
     });
  });
  // g·ªüi tin nh·∫Øn ƒë·∫øn cho th√†nh vi√™n khi react v·ªõi icon giveway
  giveawayHandler.on("giveawayReactionAdded", (giveaway, member, reaction) => {
    const ChannelGiveaway = new ButtonBuilder().setLabel("Xem giveaway").setStyle("Link").setURL(`https://discordapp.com/channels/${giveaway.message?.guildId}/${giveaway.message?.channelId}/${giveaway.message?.id}`);
    member.send({ 
      content: `Y√™u c·∫ßu c·ªßa b·∫°n v√†o giveaway n√†y ƒë√£ ƒë∆∞·ª£c ph√™ duy·ªát.`,
      components: [new ActionRowBuilder().addComponents([ ChannelGiveaway ])]
    }).catch((ex) => console.log(ex));
  }); 
  // g·ªüi tin nh·∫Øn cho th√†nh vi√™n khi h·ªç out kh·ªèi giveaway 
  giveawayHandler.on('giveawayReactionRemoved', (giveaway, member, reaction) => {
    const ChannelGiveaway = new ButtonBuilder().setLabel("Xem giveaway").setStyle("Link").setURL(`https://discordapp.com/channels/${giveaway.message?.guildId}/${giveaway.message?.channelId}/${giveaway.message?.id}`);
    return member.send({
      content: "B·∫°n ƒë√£ h·ªßy l∆∞·ª£t tham gia d√†nh gi·∫£i th∆∞·ªüng",
      components: [new ActionRowBuilder().addComponents([ ChannelGiveaway ])]
    });
  });
  // g·ªüi tin nh·∫Øn ƒë·∫øn cho ng∆∞·ªùi chi·∫øn th·∫Øng 
  giveawayHandler.on("giveawayEnded", (giveaway, winners) => {
    winners.forEach((member) => {
      member.send({ embeds: [new EmbedBuilder() 
        .setTile("üéâ„ÉªGiveaway ƒë√£ k·∫øt th√∫c")
        .setDescription(`Xin ch√∫c m·ª´ng ${member.user.username}! B·∫°n ƒë√£ tr·ªü th√†nh ng∆∞·ªùi chi·∫øn th·∫Øng!`)
        .addFields(
          { name: "üéÅ‚îÜ Ph·∫ßn th∆∞·ªüng", value: `${giveaway.prize}`, inline: true },
          { name: "ü•≥‚îÜ Giveaway", value: `[B·∫•m v√†o ƒë√¢y](https://discordapp.com/channels/${giveaway.message.guildId}/${giveaway.message.channelId}/${giveaway.message.id})`, inline: true }
        )
      ]}).catch((ex) => console.log(ex));
    });
  });
  // g·ªüi tin nh·∫Øm cho th√†nh vi√™n khi giveaway ƒë√£ k·∫øt th√∫c m√† th√†nh vi√™n v·∫´n react v·ªõi emojis
  giveawayHandler.on("endedGiveawayReactionAdded", (giveaway, member, reaction) => {
    member.send({ content: "Th·∫≠t kh√¥ng may, giveaway ƒë√£ k·∫øt th√∫c! B·∫°n kh√¥ng th·ªÉ tham gia n·ªØa" }).catch((ex) => {});
  });
  // Xu·∫•t hi·ªán khi giveaway ƒë√£ b·ªã xo√°
  giveawayHandler.on('giveawayDeleted', (giveaway) => {
    console.log(`Giveaway v·ªõi id ${giveaway.messageId} ƒë√£ b·ªã xo√°`)
  });
  // client giveaways
  client.giveawaysManager = giveawayHandler;
};