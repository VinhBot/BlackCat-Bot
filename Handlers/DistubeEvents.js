const { ActionRowBuilder, ButtonBuilder, StringSelectMenuBuilder, EmbedBuilder, ChannelType, ButtonStyle } = require("discord.js");
const { Music: database } = require(`${process.cwd()}/Assets/Schemas/database`);
const { MusicRole, customEvents } = require(`${process.cwd()}/Events/functions`);
const config = require(`${process.cwd()}/config.json`);
const playerintervals = new Map();
const PlayerMap = new Map();
let songEditInterval = null;
let lastEdited = false;

// export module :))) 
module.exports = (client) => {
  const { EmbedBuilders } = customEvents();
  /*========================================================
  # Functions 
  ========================================================*/
  const disspace = (newQueue, newTrack, queue) => {
    if(!newQueue) return new EmbedBuilders({ color: "Random", title: { name: "Kh√¥ng th·ªÉ t√¨m ki·∫øm b√†i h√°t" } });
    if(!newTrack) return new EmbedBuilders({ color: "Random", title: { name: "Kh√¥ng th·ªÉ t√¨m ki·∫øm b√†i h√°t" } });
    let skip = new ButtonBuilder({ style: ButtonStyle.Primary, customId: "skip", emoji: "‚è≠", label: "B·ªè qua", disabled: false });
    let stop = new ButtonBuilder({ style: ButtonStyle.Danger, customId: "stop", emoji: "üõë", label: "D·ª´ng ph√°t", disabled: false });
    let pause = new ButtonBuilder({ style: ButtonStyle.Success, customId: "pause", emoij: "‚è∏", label: "T·∫°m d·ª´ng", disabled: false });
    let autoplay = new ButtonBuilder({ style: ButtonStyle.Success, customId: "autoplay", emoji: "üß≠", label: "T·ª± ƒë·ªông ph√°t", disabled: false });
    let shuffle = new ButtonBuilder({ style: ButtonStyle.Primary, customId: "shuffle", emoji: "üîÄ", label: "X√°o tr·ªôn", disabled: false });
    let songloop = new ButtonBuilder({ style: ButtonStyle.Success, customId: "song", emoji: "üîÅ", label: "B√†i h√°t", disabled: false });
    let queueloop = new ButtonBuilder({ style: ButtonStyle.Success, customId: "queue", emoji: "üîÇ", label: "H√†ng ch·ªù", disabled: false });
    let forward = new ButtonBuilder({ style: ButtonStyle.Primary, customId: "seek", emoji: "‚è©", label: "+10 Gi√¢y", disabled: false });
    let rewind = new ButtonBuilder({ style: ButtonStyle.Primary, customId: "seek2", emoji: "‚è™", label: "-10 Gi√¢y", disabled: false });
    let lyrics = new ButtonBuilder({ style: ButtonStyle.Primary, customId: "lyrics", emoji: "üìù", label: "L·ªùi nh·∫°c", disabled: false });
    let volumeUp = new ButtonBuilder({ style: ButtonStyle.Primary, customId: "volumeUp", emoji: "üîä", label: "+10", disabled: false });
    let volumeDown = new ButtonBuilder({ style: ButtonStyle.Primary, customId: "volumeDown", emoji: "üîâ", label: "-10", disabled: false });
    if(!newQueue.playing) {
      pause = pause.setStyle('Success').setEmoji('‚ñ∂Ô∏è').setLabel(`Ti·∫øp t·ª•c`);
    } else if(newQueue.autoplay) {
      autoplay = autoplay.setStyle('Secondary');
    } else if(newQueue.repeatMode === 0) {
      songloop = songloop.setStyle('Success');
      queueloop = queueloop.setStyle('Success');
    } else if(newQueue.repeatMode === 1) {
      songloop = songloop.setStyle('Secondary');
      queueloop = queueloop.setStyle('Success');
    } else if(newQueue.repeatMode === 2) {
      songloop = songloop.setStyle('Success');
      queueloop = queueloop.setStyle('Secondary');
    };
    if(Math.floor(newQueue.currentTime) < 10) {
      rewind = rewind.setDisabled(true);
    } else {
      rewind = rewind.setDisabled(false);
    };
    if(Math.floor((newTrack.duration - newQueue.currentTime)) <= 10) {
      forward = forward.setDisabled(true);
    } else {
      forward = forward.setDisabled(false);
    };
    // l·∫•y d·ªØ li·ªáu request roles
    const dataMusic = database.findOne({ GuildId: newQueue.id });
    var djs = dataMusic.Djroles;
    if(!djs || !Array.isArray(djs)) {
      djs = [];
    } else djs = djs.map(r => `<@&${r}>`);
    if(djs.length == 0 ) {
      djs = `\`Kh√¥ng thi·∫øt l·∫≠p\``;
    } else djs.slice(0, 15).join(`, `);
    // t·∫°o embeds hi·ªÉn th·ªã
    const embeds = new EmbedBuilders({
      author: { name: `${newTrack.name}`, iconURL: "https://i.pinimg.com/originals/ab/4d/e0/ab4de08ece783245be1fb1f7fde94c6f.gif", url: newTrack.url },
      images: `https://img.youtube.com/vi/${newTrack.id}/mqdefault.jpg`,
      timestamp: true,
      color: "Random",
      fields: [
        { name: `Th·ªùi l∆∞·ª£ng:`, value: `>>> \`${newQueue.formattedCurrentTime} / ${newTrack.formattedDuration}\`` },
        { name: `H√†ng ch·ªù:`, value: `>>> \`${newQueue.songs.length} b√†i h√°t\`\n\`${newQueue.formattedDuration}\`` },
        { name: `√Çm l∆∞·ª£ng:`, value: `>>> \`${newQueue.volume} %\`` },
        { name: `v√≤ng l·∫∑p:`, value: `>>> ${newQueue.repeatMode ? newQueue.repeatMode === 2 ? `‚úîÔ∏è h√†ng ch·ªù` : `‚úîÔ∏è B√†i h√°t` : `‚ùå`}` },
        { name: `T·ª± ƒë·ªông ph√°t:`, value: `>>> ${newQueue.autoplay ? `‚úîÔ∏è` : `‚ùå`}` },
        { name: `Filters:`, value: `\`${newQueue.filters.names.join(", ") || "T·∫Øt"}\`` },
        { name: `MusicRole:`, value: `${djs}` },
        { name: `T·∫£i nh·∫°c v·ªÅ:`, value: `>>> [Click v√†o ƒë√¢y](${newTrack.streamURL})` },
        { name: `L∆∞·ª£t xem:`, value: `${Intl.NumberFormat().format(newQueue.songs[0].views)}` },
        { name: `Likes`, value: `üëç ${Intl.NumberFormat().format(newQueue.songs[0].likes)}` },
        { name: `Dislikes`, value: `üëé ${Intl.NumberFormat().format(newQueue.songs[0].dislikes)}` },
      ]
    });
    // kh·ªüi t·∫°o c√°c n√∫t ph·∫£n ·ª©ng
    const row1 = new ActionRowBuilder({ components: [skip, lyrics, pause, autoplay, shuffle] });
    const row2 = new ActionRowBuilder({ components: [songloop, queueloop, rewind, forward, volumeDown] });
    const row3 = new ActionRowBuilder({ components: [volumeUp, stop] });
    return { embeds: [embeds], components: [row1, row2, row3] };
  };
  // t·∫°o h√†ng ƒë·ª£i embed
  const generateQueueEmbed = (queue, guildId, leave) => {
    // m·ªëc t√≠nh th·ªùi gian 
    const createBar = (total, current, size = 25, line = "‚ñ¨", slider = "üåü") => {
      if(!total) return;
      if(!current) return `**[${slider}${line.repeat(size - 1)}]**`;
      let bar = current > total ? [line.repeat(size / 2 * 2), (current / total) * 100] : [line.repeat(Math.round(size / 2 * (current / total))).replace(/.$/, slider) + line.repeat(size - Math.round(size * (current / total)) + 1), current / total];
      if(!String(bar).includes(slider)) {
        return `**[${slider}${line.repeat(size - 1)}]**`;
      } else {
        return `**[${bar[0]}]**`;
      };
    };
    // gif ch·ªù ch·∫°y nh·∫°c
    const genshinGif = [
      "https://upload-os-bbs.hoyolab.com/upload/2021/08/12/64359086/ad5f51c6a4f16adb0137cbe1e86e165d_8637324071058858884.gif?x-oss-process=image/resize,s_1000/quality,q_80/auto-orient,0/interlace,1/format,gif",
      "https://upload-os-bbs.hoyolab.com/upload/2021/08/12/64359086/2fc26b1deefa6d2ff633dda1718d6e5b_6343886487912626448.gif?x-oss-process=image/resize,s_1000/quality,q_80/auto-orient,0/interlace,1/format,gif",
    ];
    const randomGenshin = genshinGif[Math.floor(Math.random() * genshinGif.length)];
    // t√¨m ki·∫øm guilds
    let guild = client.guilds.cache.get(guildId);
    if(!guild) return; // n·∫øu kh√¥ng th·∫•y guilds, return 
    let newQueue = client.distube.getQueue(guild.id); // t√¨m ki·∫øm h√†ng ƒë·ª£i 
    // kh·ªüi t·∫°o embeds 
    var embeds = [
      new EmbedBuilders({
        description: "**Hi·ªán t·∫°i c√≥ 0 B√†i h√°t trong H√†ng ƒë·ª£i**",
        title: { name: `üìÉ h√†ng ƒë·ª£i c·ªßa __${guild.name}__` },
        thumbnail: guild.iconURL({ dynamic: true }),
        colors: "Random",
        fields: [
          { name: "B·∫Øt ƒë·∫ßu nghe nh·∫°c, b·∫±ng c√°ch k·∫øt n·ªëi v·ªõi K√™nh voice v√† g·ª≠i __li√™n k·∫øt b√†i h√°t__ ho·∫∑c __t√™n b√†i h√°t__ trong K√™nh n√†y!", value: "\u200B" },
          { name: "T√¥i h·ªó tr·ª£ __youtube-url__, __Spotify__, __SoundCloud__ v√† c√°c __mp3__ tr·ª±c ti·∫øp ...", value: "\u200B" },
        ]
      }),
      new EmbedBuilders({
        footer: { text: guild.name, iconURL: guild.iconURL({ dynamic: true }) },
        images: randomGenshin,
        colors: "Random"
      })
    ];
    // hi·ªÉn th·ªã v√† kh·ªüi ch·∫°y b√†i h√°t ƒë·∫ßu ti√™n
    if(!leave && newQueue && newQueue.songs[0]) {
      embeds[1] = new EmbedBuilders({
        images: `https://img.youtube.com/vi/${newQueue.songs[0].id}/mqdefault.jpg`,
        author: { name: `${newQueue.songs[0].name}`, iconURL: `https://images-ext-1.discordapp.net/external/DkPCBVBHBDJC8xHHCF2G7-rJXnTwj_qs78udThL8Cy0/%3Fv%3D1/https/cdn.discordapp.com/emojis/859459305152708630.gif`, url: newQueue.songs[0].url },
        footer: { text: `${newQueue.songs[0].user?.tag}`, iconURL: newQueue.songs[0].user?.displayAvatarURL({ dynamic: true }) },
        colors: "Random",
        fields: [
          { name: `üîä √Çm l∆∞·ª£ng:`, value: `>>> \`${newQueue.volume} %\``, inline: true },
          { name: `${newQueue.playing ? `‚ôæ V√≤ng l·∫∑p:` : `‚è∏Ô∏è ƒê√£ t·∫°m d·ª´ng:`}`, value: newQueue.playing ? `>>> ${newQueue.repeatMode ? newQueue.repeatMode === 2 ? `‚úîÔ∏è H√†ng ƒë·ª£i` : `‚úîÔ∏è \`B√†i h√°t\`` : `‚ùå`}` : `>>> ‚úîÔ∏è`, inline: true },
          { name: `‚ùî Filters:`, value: `>>> ${newQueue.filters.names.join(", ") || "‚ùå"}`, inline: true },
          { name: `‚è± Th·ªùi gian:`, value: `\`${newQueue.formattedCurrentTime}\` ${createBar(newQueue.songs[0].duration, newQueue.currentTime, 13)} \`${newQueue.songs[0].formattedDuration}\``, inline: true },
          { name: `üö® Y√™u c·∫ßu b·ªüi:`, value: `>>> ${newQueue.songs[0].user}`, inline: true }
        ],
      });
      var maxTracks = 10; // b√†i h√°t / Trang h√†ng ƒë·ª£i 
      embeds[0] = new EmbedBuilders({
        title: { name: `üìÉ h√†ng ƒë·ª£i c·ªßa __${guild.name}__ - [${newQueue.songs.length} b√†i h√°t]` },
        colors: "Random",
        description: `${String(newQueue.songs.slice(0, maxTracks).map((track, index) => `**\` ${++index}. \` ${track.url ? `[${track.name.substr(0, 60).replace(/\[/igu, `\\[`).replace(/\]/igu, `\\]`)}](${track.url})` : track.name}** - \`${track.isStream ? "Tr·ª±c Ti·∫øp" : track.formattedDuration}\`\n> *ƒê∆∞·ª£c y√™u c·∫ßu b·ªüi: __${track.user?.tag}__*`).join(`\n`)).substr(0, 2048)}`,
      });
      // hi·ªÉn th·ªã s·ªë l∆∞·ª£ng b√†i h√°t ƒëang ch·ªù
      if(newQueue.songs.length > 10) {
        embeds[0].addFields({ name: `**\` =>. \` v√† *${newQueue.songs.length > maxTracks ? newQueue.songs.length - maxTracks : newQueue.songs.length}*** b√†i h√°t kh√°c ...`, value: `\u200b` })
      }; 
      // hi·ªÉn th·ªã b√†i h√°t ƒëang ƒë∆∞·ª£c ph√°t
      embeds[0].addFields({ name: `**\` =>. \` __HI·ªÜN T·∫†I ƒêANG PH√ÅT__**`, value: `**${newQueue.songs[0].url ? `[${newQueue.songs[0].name.substr(0, 60).replace(/\[/igu, `\\[`).replace(/\]/igu, `\\]`)}](${newQueue.songs[0].url})` : newQueue.songs[0].name}** - \`${newQueue.songs[0].isStream ? "Tr·ª±c Ti·∫øp" : newQueue.formattedCurrentTime}\`\n> *ƒê∆∞·ª£c y√™u c·∫ßu b·ªüi: __${newQueue.songs[0].user?.tag}__*` })
    };
    var stopbutton = new ButtonBuilder({ style: ButtonStyle.Danger, customId: "Stop", emoji: "üè†", label: "D·ª´ng ph√°t", disabled: true });
    var skipbutton = new ButtonBuilder().setStyle('Primary').setCustomId('Skip').setEmoji(`‚è≠`).setLabel("B·ªè qua").setDisabled();
    var shufflebutton = new ButtonBuilder().setStyle('Primary').setCustomId('Shuffle').setEmoji('üîÄ').setLabel("X√°o tr·ªôn").setDisabled();
    var pausebutton = new ButtonBuilder().setStyle('Secondary').setCustomId('Pause').setEmoji('‚è∏').setLabel("T·∫°m d·ª´ng").setDisabled();
    var autoplaybutton = new ButtonBuilder().setStyle('Success').setCustomId('Autoplay').setEmoji('üîÅ').setLabel("T·ª± ƒë·ªông ph√°t").setDisabled();
    var songbutton = new ButtonBuilder().setStyle('Success').setCustomId('Song').setEmoji(`üîÅ`).setLabel("B√†i h√°t").setDisabled();
    var queuebutton = new ButtonBuilder().setStyle('Success').setCustomId('Queue').setEmoji(`üîÇ`).setLabel("H√†ng ƒë·ª£i").setDisabled();
    var forwardbutton = new ButtonBuilder().setStyle('Primary').setCustomId('Forward').setEmoji('‚è©').setLabel("+10 Gi√¢y").setDisabled();
    var rewindbutton = new ButtonBuilder().setStyle('Primary').setCustomId('Rewind').setEmoji('‚è™').setLabel("-10 Gi√¢y").setDisabled();
    var volumeupbutton = new ButtonBuilder().setStyle("Primary").setCustomId("VolumeUp").setEmoji("üîä").setLabel("+10").setDisabled();
    var volumedownbutton = new ButtonBuilder().setStyle("Primary").setCustomId("VolumeDown").setEmoji("üîâ").setLabel("-10").setDisabled();
    var lyricsbutton = new ButtonBuilder().setStyle('Primary').setCustomId('Lyrics').setEmoji('üìù').setLabel("L·ªùi nh·∫°c").setDisabled();
    if(!leave && newQueue && newQueue.songs[0]) {
      skipbutton = skipbutton.setDisabled(false);
      shufflebutton = shufflebutton.setDisabled(false);
      stopbutton = stopbutton.setDisabled(false);
      songbutton = songbutton.setDisabled(false);
      queuebutton = queuebutton.setDisabled(false);
      forwardbutton = forwardbutton.setDisabled(false);
      rewindbutton = rewindbutton.setDisabled(false);
      autoplaybutton = autoplaybutton.setDisabled(false);
      pausebutton = pausebutton.setDisabled(false);
      lyricsbutton = lyricsbutton.setDisabled(false);
      volumeupbutton = volumeupbutton.setDisabled(false);
      volumedownbutton = volumedownbutton.setDisabled(false);
      if(newQueue.autoplay) {
        autoplaybutton = autoplaybutton.setStyle('Secondary')
      } else if(newQueue.paused) {
        pausebutton = pausebutton.setStyle('Success').setEmoji('‚ñ∂Ô∏è').setLabel("Ti·∫øp t·ª•c");
      };
      if(newQueue.repeatMode === 1) {
        songbutton = songbutton.setStyle('Secondary');
        queuebutton = queuebutton.setStyle('Success');
      } else if(newQueue.repeatMode === 2) {
        songbutton = songbutton.setStyle('Success');
        queuebutton = queuebutton.setStyle('Secondary');
      } else {
        songbutton = songbutton.setStyle('Success');
        queuebutton = queuebutton.setStyle('Success');
      };
    };
    // t·∫°o th√†nh ph·∫ßn ph·∫£n ·ª©ng 
    var Emojis = [`0Ô∏è‚É£`, `1Ô∏è‚É£`];
    var playlistName = [`Gaming`, `NCS | No Copyright Music`];
    const selectMenu = new StringSelectMenuBuilder().setCustomId("StringSelectMenuBuilder").addOptions(playlistName.map((t, index) => {
      return {
        label: t.substr(0, 25), // tr√≠ch xu·∫•t t·ª´ 0 ƒë·∫øn 25 t·ª´ 
        value: t.substr(0, 25), // tr√≠ch xu·∫•t t·ª´ 0 ƒë·∫øn 25 t·ª´
        description: `T·∫£i Danh s√°ch ph√°t nh·∫°c: '${t}'`.substr(0, 50),  // tr√≠ch xu·∫•t t·ª´ 0 ƒë·∫øn 50 t·ª´
        emoji: Emojis[index] // th√™m emoji cho t·ª´ng c·ª•m t·ª´
      };
    }));
    const row0 = new ActionRowBuilder({ components: [selectMenu] });
    const row1 = new ActionRowBuilder({ components: [skipbutton, stopbutton, pausebutton, autoplaybutton, shufflebutton] });
    const row2 = new ActionRowBuilder({ components: [songbutton, queuebutton, forwardbutton, rewindbutton, lyricsbutton] });
    const row3 = new ActionRowBuilder({ components: [volumeupbutton, volumedownbutton] });
    //b√¢y gi·ªù ch√∫ng t√¥i th√™m c√°c th√†nh ph·∫ßn!
    return { embeds, components: [row0, row1, row2, row3] };                                                                                                           
  };
  // c·∫≠p nh·∫≠t H·ªá th·ªëng √¢m nh·∫°c
  const updateMusicSystem = async(queue, leave = false) => {
    const data = await database.findOne({ GuildId: queue.id });
    if(!data) return; // n·∫øu kh√¥ng th·∫•y data, return;
    if(!queue) return; // n·∫øu kh√¥ng th·∫•y queue, return;
    if(data.ChannelId && data.ChannelId.length > 5) {
      let guild = client.guilds.cache.get(queue.id);
      if(!guild) return console.log(`Update-Music-System`.brightCyan + ` - Music System - Kh√¥ng t√¨m th·∫•y Guild!`)
      let channel = guild.channels.cache.get(data.ChannelId);
      if(!channel) channel = await guild.channels.fetch(data.ChannelId).catch(() => {}) || false;
      if(!channel) return console.log(`Update-Music-System`.brightCyan + ` - Music System - Kh√¥ng t√¨m th·∫•y k√™nh!`)
      let message = channel.messages.cache.get(data.MessageId);
      if(!message) message = await channel.messages.fetch(data.MessageId).catch(() => {}) || false;
      if(!message) return console.log(`Update-Music-System`.brightCyan + ` - Music System - Kh√¥ng t√¨m th·∫•y tin nh·∫Øn!`)
      message.edit(generateQueueEmbed(client, queue.id, leave)).catch((e) => {
        console.log(e);
      }).then(() => console.log(`- ƒê√£ ch·ªânh s·ª≠a tin nh·∫Øn do T∆∞∆°ng t√°c c·ªßa ng∆∞·ªùi d√πng`));
    };
  };
  /*========================================================
  # B·∫Øt ƒë·∫ßu ch·∫°y c√°c evnets
  ========================================================*/
  const distube = client.distube;
  client.updateMusicSystem = updateMusicSystem;
  distube.on("playSong", async(queue, track) => {
    const defaultData = await database.findOne({ GuildId: queue.id });
    if(!defaultData) return;
    var newQueue = distube.getQueue(queue.id);
    updateMusicSystem(newQueue); 
    const nowplay = await queue.textChannel?.send(disspace(newQueue, track)).then((message) => {
      PlayerMap.set("currentmsg", message.id);
      return message;
    }).catch((e) => console.log(e));
    if(queue.textChannel?.id === defaultData.ChannelId) return;
    var collector = nowplay?.createMessageComponentCollector({
      filter: (i) => i.isButton() && i.user && i.message.author.id == client.user.id,
      time: track.duration > 0 ? track.duration * 1000 : 600000
    });
    try {clearInterval(songEditInterval)} catch(e) {};
    songEditInterval = setInterval(async() => {
      if(!lastEdited) {
        try {
          var newQueue = distube.getQueue(queue.id);
          await nowplay.edit(disspace(newQueue, newQueue.songs[0])).catch((e) => {});
        } catch(e) {
          clearInterval(songEditInterval);
        };
      };
    }, 4000);
    collector?.on('collect', async(i) => {
      if(MusicRole(client, i.member, client.distube.getQueue(i.guild.id).songs[0])) {
        return i.reply({
          content: `B·∫°n kh√¥ng c√≥ MusicRole ho·∫∑c kh√¥ng ph·∫£i ng∆∞·ªùi y√™u c·∫ßu b√†i h√°t\n${MusicRole(client, i.member, client.distube.getQueue(i.guild.id).songs[0])}`, ephemeral: true 
        });         
      };
      lastEdited = true;
      setTimeout(() => lastEdited = false, 7000);
      let { member, guild } = i;
      // if(!member.voice.channel) return i.reply({ content: `‚ùå **B·∫°n ph·∫£i tham gia k√™nh voice m·ªõi c√≥ th·ªÉ s·ª≠ d·ª•ng l·ªánh**` });
      const test = guild.channels.cache.filter(chnl => (chnl.type == ChannelType.GuildVoice)).find(channel => (channel.members.has(client.user.id)));
      if(test && member.voice.channel.id !== test?.id) return interaction.reply({ embeds: [new EmbedBuilder().setDescription(`‚ùå T√¥i ƒë√£ ch∆°i trong <#${test?.id}>`)], ephemeral: true });
      // b·ªè qua b√†i h√°t
      if(i.customId == `skip`) {
        if(!member.voice.channel) return i.reply({ content: `**B·∫°n ph·∫£i tham gia k√™nh voice m·ªõi c√≥ th·ªÉ s·ª≠ d·ª•ng l·ªánh**` });
        if(!distube.getQueue(i.guild.id) || !newQueue.songs || newQueue.songs.length == 0) return await i.reply({ content: "Danh s√°ch nh·∫°c tr·ªëng" });
        if(member.voice.channel.id !== newQueue.voiceChannel.id) return i.reply({ content: `**Tham gia k√™nh voice c·ªßa t√¥i**` });
              if(newQueue.songs.length == 0) {
                  clearInterval(songEditInterval);
                  await distube.stop(i.guild.id);
                  return await i.reply({ embeds: [new EmbedBuilders({
                    colors: "Random",
                    title: { name: "‚èπ **D·ª´ng ph√°t nh·∫°c**" },
                    footer: { text: `Y√™u c·∫ßu b·ªüi: ${member.user.tag}`, iconURL: `${member.user.displayAvatarURL({ dynamic: true })}`},
                  })]
                  }).then((i) => {
                    setTimeout(() => i.interaction.deleteReply(), 3000);
                  }).catch((e) => {});
              };             
              try {
                  await distube.skip(i.guild.id) 
                  await i.reply({ embeds: [new EmbedBuilder()
                     .setColor("Random").setTimestamp()
                     .setTitle(`‚è≠ **B·ªè qua b√†i h√°t!**`)
                     .setFooter({ text: `Yesu c·∫ßu b·ªüi: ${member.user.tag}`, iconURL: `${member.user.displayAvatarURL({dynamic: true})}` })
                  ]}).then((i) => {
                     setTimeout(() => i.interaction.deleteReply(), 3000);
                  }).catch((e) => {});
                  nowplay.edit({ components: [] });
              } catch(error) {
                i.reply({ content: "Hi·ªán t·∫°i ch·ªâ c√≥ m·ªôt b√†i h√°t trong playlist, b·∫°n c·∫ßn th√™m t·ªëi thi·ªÉu √≠t nh·∫•t m·ªôt b√†i h√°t n·ªØa ..." }).then((i) => {
                  setTimeout(() => i.interaction.deleteReply(), 3000);
                }).catch((e) => { });
              };
            } else if (i.customId == "stop") {
                if(!member.voice.channel) return i.reply({ content: `**B·∫°n ph·∫£i tham gia k√™nh voice m·ªõi c√≥ th·ªÉ s·ª≠ d·ª•ng l·ªánh**` });
                if(!distube.getQueue(i.guild.id) || !newQueue.songs || newQueue.songs.length == 0) return await i.reply({ content: "Danh s√°ch nh·∫°c tr·ªëng" });
                if(member.voice.channel.id !== newQueue.voiceChannel.id) return i.reply({ content: `**Tham gia k√™nh voice c·ªßa t√¥i**` });
                nowplay.edit({ components: [] });
                await i.reply({ content: "üëå ƒê√£ d·ª´ng ph√°t nh·∫°c v√† r·ªùi kh·ªèi k√™nh voice channel theo y√™u c·∫ßu" }).then((i) => {
                  setTimeout(() => i.interaction.deleteReply(), 3000);
                }).catch((e) => {});
                await distube.voices.leave(i.guild.id);
            } else if(i.customId == "pause") {
              if(!member.voice.channel) return i.reply({ content: `**B·∫°n ph·∫£i tham gia k√™nh voice m·ªõi c√≥ th·ªÉ s·ª≠ d·ª•ng l·ªánh**` });
              if(!distube.getQueue(i.guild.id) || !newQueue.songs || newQueue.songs.length == 0) return await i.reply({ content: "Danh s√°ch nh·∫°c tr·ªëng" });
              if(member.voice.channel.id !== newQueue.voiceChannel.id) return i.reply({ content: `**Tham gia k√™nh voice c·ªßa t√¥i**` });
              if(newQueue.playing) {
                await distube.pause(i.guild.id);
                nowplay.edit(disspace(distube.getQueue(newQueue.id), newQueue.songs[0])).catch((e) => {})
                await i.reply({ embeds: [new EmbedBuilder()
                    .setColor("Random").setTimestamp()
                    .setTitle(`‚è∏ **T·∫°m d·ª´ng**`)
                    .setFooter({ text: `y√™u c·∫ßu b·ªüi ${member.user.tag}`, iconURL: `${member.user.displayAvatarURL({dynamic: true})}`})]
                }).then((i) => {
                  setTimeout(() => i.interaction.deleteReply(), 3000);
                }).catch((e) => {});
              } else {
                await distube.resume(i.guild.id);
                nowplay.edit(disspace(distube.getQueue(newQueue.id), newQueue.songs[0])).catch((e) => {})
                await i.reply({ embeds: [new EmbedBuilder()
                    .setColor("Random").setTimestamp()
                    .setTitle(`‚ñ∂Ô∏è **ti·∫øp t·ª•c**`)
                    .setFooter({ text: `Y√™u c·∫ßu b·ªüi ${member.user.tag}`, iconURL: `${member.user.displayAvatarURL({dynamic: true})}`})]
                }).then((i) => {
                  setTimeout(() => i.interaction.deleteReply(), 3000);
                }).catch((e) => {});
              };
            } else if (i.customId == "autoplay") {
              if(!member.voice.channel) return i.reply({ content: `**B·∫°n ph·∫£i tham gia k√™nh voice m·ªõi c√≥ th·ªÉ s·ª≠ d·ª•ng l·ªánh**` });
              if(!distube.getQueue(i.guild.id) || !newQueue.songs || newQueue.songs.length == 0) return await i.reply({ content: "Danh s√°ch nh·∫°c tr·ªëng" });
              if(member.voice.channel.id !== newQueue.voiceChannel.id) return i.reply({ content: `**Tham gia k√™nh voice c·ªßa t√¥i**` });
              await newQueue.toggleAutoplay()
              if(newQueue.autoplay) {
                nowplay.edit(disspace(distube.getQueue(newQueue.id), newQueue.songs[0])).catch((e) => {});
              } else {
                nowplay.edit(disspace(distube.getQueue(newQueue.id), newQueue.songs[0])).catch((e) => {});
              };
              await i.reply({ embeds: [new EmbedBuilder()
                  .setColor("Random").setTimestamp()
                  .setTitle(`${newQueue.autoplay ? `‚úîÔ∏è **ƒê√£ b·∫≠t ch·∫ø ƒë·ªô t·ª± ƒë·ªông ph√°t**`: `‚ùå **ƒê√£ t·∫Øt ch·∫ø ƒë·ªô t·ª± ƒë·ªông ph√°t**`}`)
                  .setFooter({ text: `y√™u c·∫ßu b·ªüi ${member.user.tag}`, iconURL: `${member.user.displayAvatarURL({dynamic: true})}`})]
              }).then((i) => {
                setTimeout(() => i.interaction.deleteReply(), 3000);
              }).catch((e) => {});
            } else if(i.customId == "shuffle") {
              if(!member.voice.channel) return i.reply({ content: `**B·∫°n ph·∫£i tham gia k√™nh voice m·ªõi c√≥ th·ªÉ s·ª≠ d·ª•ng l·ªánh**` });
              if(!distube.getQueue(i.guild.id) || !newQueue.songs || newQueue.songs.length == 0) return await i.reply({ content: "Danh s√°ch nh·∫°c tr·ªëng" });
              if(member.voice.channel.id !== newQueue.voiceChannel.id) return i.reply({ content: `**Tham gia k√™nh voice c·ªßa t√¥i**` });
              
              maps.set(`beforeshuffle-${newQueue.id}`, newQueue.songs.map(track => track).slice(1));
              await newQueue.shuffle()
              await i.reply({ embeds: [new EmbedBuilder()
                .setColor("Random").setTimestamp()
                .setTitle(`üîÄ **X√°o tr·ªôn ${newQueue.songs.length} b√†i h√°t!**`)
                .setFooter({ text: `YC b∆°Ãâi: ${member.user.tag}`, iconURL: `${member.user.displayAvatarURL({dynamic: true})}`})]
              }).then((i) => {
                setTimeout(() => i.interaction.deleteReply(), 3000);
              }).catch((e) => {});
            } else if(i.customId == "song") {
              if(!member.voice.channel) return i.reply({ content: `**B·∫°n ph·∫£i tham gia k√™nh voice m·ªõi c√≥ th·ªÉ s·ª≠ d·ª•ng l·ªánh**` });
              if(!distube.getQueue(i.guild.id) || !newQueue.songs || newQueue.songs.length == 0) return await i.reply({ content: "Danh s√°ch nh·∫°c tr·ªëng" });
              if(member.voice.channel.id !== newQueue.voiceChannel.id) return i.reply({ content: `**Tham gia k√™nh voice c·ªßa t√¥i**` });
              
              if(newQueue.repeatMode == 1){
                await newQueue.setRepeatMode(0);
              } else {
                await newQueue.setRepeatMode(1);
              };
              await i.reply({ embeds: [new EmbedBuilder()
                  .setColor("Random").setTimestamp()
                  .setTitle(`${newQueue.repeatMode == 1 ? `‚úîÔ∏è **L·∫∑p b√†i h√°t ƒë√£ b·∫≠t**`: `‚ùå **L·∫∑p b√†i h√°t ƒë√£ t·∫Øt**`}`)
                  .setFooter({ text: `Y√™u c·∫ßu b·ªüi: ${member.user.tag}`, iconURL: `${member.user.displayAvatarURL({dynamic: true})}`})]
              }).then((i) => setTimeout(() => i.interaction.deleteReply(), 3000)).catch((e) => {});
              nowplay.edit(disspace(distube.getQueue(newQueue.id), newQueue.songs[0])).catch((e) => {});
            } else if(i.customId == "queue") {
              if(!member.voice.channel) return i.reply({ content: `**B·∫°n ph·∫£i tham gia k√™nh voice m·ªõi c√≥ th·ªÉ s·ª≠ d·ª•ng l·ªánh**` });
              if(!distube.getQueue(i.guild.id) || !newQueue.songs || newQueue.songs.length == 0) return await i.reply({ content: "Danh s√°ch nh·∫°c tr·ªëng" });
              if(member.voice.channel.id !== newQueue.voiceChannel.id) return i.reply({ content: `**Tham gia k√™nh voice c·ªßa t√¥i**` });
              
              if(newQueue.repeatMode == 2) {
                await newQueue.setRepeatMode(0);
              } else {
                await newQueue.setRepeatMode(2);
              };
              await i.reply({ embeds: [new EmbedBuilder()
                .setColor("Random").setTimestamp()
                .setTitle(`${newQueue.repeatMode == 2 ? `**L·∫∑p h√†ng ƒë·ª£i ƒë√£ b·∫≠t**`: `**L·∫∑p h√†ng ƒë·ª£i ƒë√£ t·∫Øt**`}`)
                .setFooter({ text: `Y√™u c·∫ßu b·ªüi: ${member.user.tag}`, iconURL: `${member.user.displayAvatarURL({dynamic: true})}`})]
              }).then((i) => setTimeout(() => i.interaction.deleteReply(), 3000)).catch((e) => {});
              nowplay.edit(disspace(distube.getQueue(newQueue.id), newQueue.songs[0])).catch((e) => {});
            } else if(i.customId == "seek"){
              if(!member.voice.channel) return i.reply({ content: `**B·∫°n ph·∫£i tham gia k√™nh voice m·ªõi c√≥ th·ªÉ s·ª≠ d·ª•ng l·ªánh**` });
              if(!distube.getQueue(i.guild.id) || !newQueue.songs || newQueue.songs.length == 0) return await i.reply({ content: "Danh s√°ch nh·∫°c tr·ªëng" });
              if(member.voice.channel.id !== newQueue.voiceChannel.id) return i.reply({ content: `**Tham gia k√™nh voice c·ªßa t√¥i**` });
              
              let seektime = newQueue.currentTime + 10;
              if (seektime >= newQueue.songs[0].duration) seektime = newQueue.songs[0].duration - 1;
              await newQueue.seek(Number(seektime))
              collector.resetTimer({ time: (newQueue.songs[0].duration - newQueue.currentTime) * 1000 })
              await i.reply({ embeds: [new EmbedBuilder()
                  .setColor("Random").setTimestamp()
                  .setTitle(`‚è© **+10 Gi√¢y!**`)
                  .setFooter({ text: `y√™u c·∫ßu b·ªüi: ${member.user.tag}`, iconURL: `${member.user.displayAvatarURL({dynamic: true})}`})]
              }).then((i) => setTimeout(() => i.interaction.deleteReply(), 3000)).catch((e) => {});
              nowplay.edit(disspace(distube.getQueue(newQueue.id), newQueue.songs[0])).catch((e) => {})
            } else if(i.customId == "seek2") {
              if(!member.voice.channel) return i.reply({ content: `**B·∫°n ph·∫£i tham gia k√™nh voice m·ªõi c√≥ th·ªÉ s·ª≠ d·ª•ng l·ªánh**` });
              if(!distube.getQueue(i.guild.id) || !newQueue.songs || newQueue.songs.length == 0) return await i.reply({ content: "Danh s√°ch nh·∫°c tr·ªëng" });
              if(member.voice.channel.id !== newQueue.voiceChannel.id) return i.reply({ content: `**Tham gia k√™nh voice c·ªßa t√¥i**` });
              
              let seektime = newQueue.currentTime - 10;
              if (seektime < 0) seektime = 0;
              if (seektime >= newQueue.songs[0].duration - newQueue.currentTime) seektime = 0;
              await newQueue.seek(Number(seektime))
              collector.resetTimer({ time: (newQueue.songs[0].duration - newQueue.currentTime) * 1000})
              await i.reply({ embeds: [new EmbedBuilder()
                  .setColor("Random").setTimestamp()
                  .setTitle(`‚è™ **-10 Gi√¢y!**`)
                  .setFooter({ text: `y√™u c·∫ßu b·ªüi: ${member.user.tag}`, iconURL: `${member.user.displayAvatarURL({dynamic: true})}`})]
              }).then((i) => setTimeout(() => i.interaction.deleteReply(), 3000)).catch((e) => {});
              nowplay.edit(disspace(distube.getQueue(newQueue.id), newQueue.songs[0])).catch((e) => {})
            } else if(i.customId == `lyrics`) {
              if(!member.voice.channel) return i.reply({ content: `**B·∫°n ph·∫£i tham gia k√™nh voice m·ªõi c√≥ th·ªÉ s·ª≠ d·ª•ng l·ªánh**` });
              if(!distube.getQueue(i.guild.id) || !newQueue.songs || newQueue.songs.length == 0) return await i.reply({ content: "Danh s√°ch nh·∫°c tr·ªëng" });
              if(member.voice.channel.id !== newQueue.voiceChannel.id) return i.reply({ content: `**Tham gia k√™nh voice c·ªßa t√¥i**` });
              
              try {
                 await i.deferReply();
                 let thumbnail = newQueue.songs.map((song) => song.thumbnail).slice(0, 1).join("\n");
                 let name = newQueue.songs.map((song) => song.name).slice(0, 1).join("\n");
                 i.editReply({ embeds: [new EmbedBuilder()
                  .setAuthor({ name: name, iconURL: thumbnail, url: newQueue.songs.map((song) => song.url).slice(0, 1).join("\n") })
                  .setColor("Random")
                  .setThumbnail(thumbnail)
                  .setDescription((await require("lyrics-finder")(newQueue.songs.map((song) => song.uploader.name).slice(0, 1).join("\n"), name)) || "Kh√¥ng t√¨m th·∫•y l·ªùi b√†i h√°t!")
                 ], ephemeral: true });
              } catch(e) {
                  i.reply({ content: `L·ªói: ${e}`, ephemeral: true });
              };
            } else if(i.customId == "volumeUp") {
              if(!member.voice.channel) return i.reply({ content: `**B·∫°n ph·∫£i tham gia k√™nh voice m·ªõi c√≥ th·ªÉ s·ª≠ d·ª•ng l·ªánh**` });
              if(!distube.getQueue(i.guild.id) || !newQueue.songs || newQueue.songs.length == 0) return await i.reply({ content: "Danh s√°ch nh·∫°c tr·ªëng" });
              if(member.voice.channel.id !== newQueue.voiceChannel.id) return i.reply({ content: `**Tham gia k√™nh voice c·ªßa t√¥i**` });
              
              try {
                const volumeUp = Number(newQueue.volume) + 10;
                if (volumeUp < 0 || volumeUp > 100) return i.reply({
                  embeds: [new EmbedBuilder().setColor("Random").setDescription("B·∫°n ch·ªâ c√≥ th·ªÉ ƒë·∫∑t √¢m l∆∞·ª£ng t·ª´ 0 ƒë·∫øn 100.").setTimestamp()], ephemeral: true 
                });
			          await newQueue.setVolume(volumeUp);
			          await i.reply({ content: `:white_check_mark: | √Çm l∆∞·ª£ng tƒÉng l√™n ${volumeUp}%` }).then((i) => {
                  setTimeout(() => i.interaction.deleteReply(), 3000);
                });
              } catch (error) {
                console.log(error);
              };
            } else if(i.customId == "volumeDown") {
              if(!member.voice.channel) return i.reply({ content: `**B·∫°n ph·∫£i tham gia k√™nh voice m·ªõi c√≥ th·ªÉ s·ª≠ d·ª•ng l·ªánh**` });
              if(!distube.getQueue(i.guild.id) || !newQueue.songs || newQueue.songs.length == 0) return await i.reply({ content: "Danh s√°ch nh·∫°c tr·ªëng" });
              if(member.voice.channel.id !== newQueue.voiceChannel.id) return i.reply({ content: `**Tham gia k√™nh voice c·ªßa t√¥i**` });
              
              try {
                const volumeDown = Number(newQueue.volume) - 10;
                const invalidVolume = new EmbedBuilder().setColor("Random").setDescription(":x: | Kh√¥ng th·ªÉ gi·∫£m √¢m l∆∞·ª£ng c·ªßa b·∫°n n·ªØa n·∫øu ti·∫øp t·ª•c gi·∫£m b·∫°n s·∫Ω kh√¥ng nghe th·∫•y g√¨").setTimestamp();
                if(volumeDown <= 0) return i.reply({ embeds: [invalidVolume], ephemeral: true });
			          await newQueue.setVolume(volumeDown);
			          await i.reply({ content: `:white_check_mark: | √Çm l∆∞·ª£ng gi·∫£m xu·ªëng ${volumeDown}%` }).then((i) => {
                  setTimeout(() => i.interaction.deleteReply(), 3000);
                });
              } catch (error) {
                console.log(error);
              };
            };
        });
    collector?.on('end', async(collected, reason) => {
      if(reason === "time") {
        nowplay.edit({ components: [] });
      };
    });
  }).on("finishSong", (queue, song) => {
    return queue.textChannel?.messages?.fetch(PlayerMap.get("currentmsg")).then((msg) => {
      const embed = new EmbedBuilders({
        author: { name: `${song.name}`, iconURL: "https://cdn.discordapp.com/attachments/883978730261860383/883978741892649000/847032838998196234.png", url: song.url },
        footer: { text: `üíØ ${song.user.tag}\n‚õîÔ∏è B√†i h√°t ƒë√£ k·∫øt th√∫c!`, iconURL: song.user.displayAvatarURL({ dynamic: true }) },
        thumbnail: `https://img.youtube.com/vi/${song.id}/mqdefault.jpg`,
        colors: "Random"
      });
      return msg.edit({ 
        embeds: [embed], 
        components: []
      }).catch((e) => console.log(e));
    }).catch((e) => console.log(e));
  }).on("finish", async(queue) => {
    return queue.textChannel?.send({ 
      embeds: [new EmbedBuilders({ color: "Random", description: "ƒê√£ ph√°t h·∫øt nh·∫°c trong h√†ng ƒë·ª£i,.. r·ªùi kh·ªèi k√™nh voice" })]
    }).catch((e) => { });
  }).on("addList", async(queue, playlist) => {
    const embed = new EmbedBuilders({
      description: `üëç Danh saÃÅch: [\`${playlist.name}\`](${playlist.url ?playlist.url : ``})  -  \`${playlist.songs.length} B√†i h√°t ${playlist.songs.length > 0 ? `` : ``}\``,
      thumbnail: `${playlist.thumbnail.url ? playlist.thumbnail.url : `https://img.youtube.com/vi/${playlist.songs[0].id}/mqdefault.jpg`}`,
      footer: { text: `üíØ ${playlist.user.tag}`, iconURL: `${playlist.user.displayAvatarURL({ dynamic: true })}` },
      title: { name: "ƒê√£ th√™m v√†i h√°t v√†o h√†ng ƒë·ª£i" },
      timestamp: true,
      colors: "Random",
      fields: [
        { name: `**Th·ªùi gian d·ª± t√≠nh**`, value: `\`${queue.songs.length - - playlist.songs.length} B√†i h√°t\` - \`${(Math.floor((queue.duration - playlist.duration) / 60 * 100) / 100).toString().replace(`.`, `:`)}\``, inline: true },
        { name: `**Th·ªùi l∆∞·ª£ng h√†ng ƒë·ª£i**`, value: `\`${queue.formattedDuration}\``, inline: true },
      ]
    });
    return queue.textChannel?.send({ embeds: [embed] }).catch((e) => {});
  }).on("addSong", async(queue, song) => {
    const embed = new EmbedBuilders({
      author: { name: `B√†i h√°t ƒë√£ ƒë∆∞·ª£c th√™m!`, iconURL: `${song.user.displayAvatarURL({ dynamic: true })}`, url: `${song.url}` },
      footer: { text: `üíØ ${song.user.tag}`, iconURL: `${song.user.displayAvatarURL({ dynamic: true })}` },
      description: `üëç B√†i h√°t: [${song.name}](${song.url})  -  ${song.formattedDuration}`,
      thumbnail: `https://img.youtube.com/vi/${song.id}/mqdefault.jpg`,
      timestamp: true,
      colors: "Random",
      fields: [
        { name: `‚åõ **Th·ªùi gian d·ª± t√≠nh**`, value: `\`${queue.songs.length - 1} B√†i h√°t\` - \`${(Math.floor((queue.duration - song.duration) / 60 * 100) / 100).toString().replace(`.`, `:`)}\``, inline: true },
        { name: `üé• L∆∞·ª£t xem`, value: `${(queue.songs[0].views).toLocaleString()}`, inline: true },
        { name: `üëç Likes`, value: `${(queue.songs[0].likes).toLocaleString()}`, inline: true },
        { name: `üëé Dislikes`, value: `${(queue.songs[0].dislikes).toLocaleString()}`, inline: true},
        { name: `üåÄ **Th·ªùi l∆∞·ª£ng h√†ng ƒë·ª£i**`, value: `\`${queue.formattedDuration}\``, inline: true },
      ]
    });
    return queue.textChannel?.send({ embeds: [embed] }).catch((e) => {});
  }).on("deleteQueue", async(queue) => {
    var newQueue = client.distube.getQueue(queue.id);
    if(!PlayerMap.has(`deleted-${queue.id}`)) {
      PlayerMap.set(`deleted-${queue.id}`, true);
      if(client.maps.has(`beforeshuffle-${queue.id}`)){
        client.maps.delete(`beforeshuffle-${newQueue.id}`);
      };
      try {
        //X√≥a kho·∫£ng th·ªùi gian ƒë·ªÉ ki·ªÉm tra h·ªá th·ªëng th√¥ng b√°o li√™n quan
        clearInterval(playerintervals.get(`checkrelevantinterval-${queue.id}`))
        playerintervals.delete(`checkrelevantinterval-${queue.id}`);
        // X√≥a kho·∫£ng th·ªùi gian cho H·ªá th·ªëng Embed Ch·ªânh s·ª≠a Nh·∫°c
        clearInterval(playerintervals.get(`musicsystemeditinterval-${queue.id}`))
        playerintervals.delete(`musicsystemeditinterval-${queue.id}`);
      } catch(e) {
        console.log(e);
      };
      updateMusicSystem(queue, true);
      return queue.textChannel?.send({ embeds: [new EmbedBuilder()
        .setColor("Random")
        .setTitle(`‚õîÔ∏è`)
        .setDescription(`:headphones: **H√†ng ƒë·ª£i ƒë√£ b·ªã x√≥a**`)
        .setTimestamp()
      ]}).catch((ex) => {});
    };
  }).on("initQueue", async(queue) => {
    const data = await database.findOne({ GuildId: queue.id });
    var newQueue = client.distube.getQueue(queue.id);
    if(!data) return;
    let channelId = data.ChannelId;
    let messageId = data.MessageId;
    if(PlayerMap.has(`deleted-${queue.id}`)) {
      PlayerMap.delete(`deleted-${queue.id}`);
    };
    queue.autoplay = Boolean(data.DefaultAutoplay);
    queue.volume = Number(data.DefaultVolume);
    queue.filters.set(data.DefaultFilters);
    queue.voice.setSelfDeaf(true); 
    /** 
    * Ki·ªÉm tra c√°c th√¥ng b√°o c√≥ li√™n quan b√™n trong K√™nh y√™u c·∫ßu h·ªá th·ªëng √¢m nh·∫°c
    */
    playerintervals.set(`checkrelevantinterval-${queue.id}`, setInterval(async() => {
      if(channelId && channelId.length > 5) {
        console.log(`Music System - Relevant Checker`.brightCyan + ` - Ki·ªÉm tra c√°c tin nh·∫Øn kh√¥ng li√™n quan`);
        let guild = client.guilds.cache.get(queue.id);
        if(!guild) return console.log(`Music System - Relevant Checker`.brightCyan + ` - Kh√¥ng t√¨m th·∫•y Guild!`);
        let channel = guild.channels.cache.get(channelId);
        if(!channel) channel = await guild.channels.fetch(channelId).catch(() => {}) || false;
        if(!channel) return console.log(`Music System - Relevant Checker`.brightCyan + ` - Kh√¥ng t√¨m th·∫•y k√™nh!`);
        let messages = await channel.messages.fetch();
        if(messages.filter(m => m.id != messageId).size > 0) {
          channel.bulkDelete(messages.filter(m => m.id != messageId)).catch(() => {}).then(messages => console.log(`Music System - Relevant Checker`.brightCyan + ` - ƒê√£ x√≥a h√†ng lo·∫°t ${messages.size ? messages.size : "0"} tin nh·∫Øn`));
        } else {
          console.log(`Music System - Relevant Checker`.brightCyan + ` - Kh√¥ng c√≥ tin nh·∫Øn li√™n quan`)
        };
      };
    }, 60000));
    /**
    * Music System Edit Embeds
    */
    playerintervals.set(`musicsystemeditinterval-${queue.id}`, setInterval(async() => {
      if(channelId  && channelId.length > 5) {
        let guild = client.guilds.cache.get(queue.id);
        if (!guild) return console.log(`Music System Edit Embeds`.brightMagenta + ` - Music System - Kh√¥ng t√¨m th·∫•y Guild!`)
        let channel = guild.channels.cache.get(channelId);
        if(!channel) channel = await guild.channels.fetch(channelId).catch(() => {}) || false;
        if(!channel) return console.log(`Music System Edit Embeds`.brightMagenta + ` - Music System - Kh√¥ng t√¨m th·∫•y k√™nh!`)
        let message = channel.messages.cache.get(messageId);
        if(!message) message = await channel.messages.fetch(messageId).catch(() => {}) || false;
        if(!message) return console.log(`Music System Edit Embeds`.brightMagenta + ` - Music System - Kh√¥ng t√¨m th·∫•y tin nh·∫Øn!`)
        if(!message.editedTimestamp) return console.log(`Music System Edit Embeds`.brightCyan + ` - Ch∆∞a t·ª´ng ch·ªânh s·ª≠a tr∆∞·ªõc ƒë√¢y!`)
        if(Date.now() - message.editedTimestamp > (7000) - 100) {
          message.edit(generateQueueEmbed(client, queue.id)).catch((e) => console.log(e)).then(() => {
            console.log("Music System Edit Embeds".brightMagenta + ` - ƒê√£ ch·ªânh s·ª≠a Nh√∫ng h·ªá th·ªëng √¢m nh·∫°c, v√¨ kh√¥ng c√≥ ch·ªânh s·ª≠a n√†o kh√°c trong ${Math.floor((7000) / 1000)} gi√¢y!`)
          });
        };
      };
    }, 7000));
  }).on("disconnect", (queue) => {
    return queue.textChannel?.send({ embeds: [new EmbedBuilder().setDescription(":x: | ƒê√£ ng·∫Øt k·∫øt n·ªëi kh·ªèi k√™nh voice")] }).catch((e) => {});
  }).on("empty", (queue) => {
      return queue.textChannel?.send({ content: "K√™nh voice ch·ªëng. r·ªùi kh·ªèi k√™nh :))" }).catch((e) => {});
  }).on('error', (channel, error) => {
    return channel.send({ embeds: [new EmbedBuilder()
        .setDescription(`ƒê√£ x·∫£y ra l·ªói: ${error?.slice(0, 1979)}`)
        .setColor("Random")
        .setTitle("c√≥ l·ªói su·∫•t hi·ªán")
    ]}).catch((e) => {});
  }).on("noRelated", async(queue) => {
    return await queue.textChannel?.send({ content:"Kh√¥ng th·ªÉ t√¨m th·∫•y video, nh·∫°c li√™n quan ƒë·ªÉ ph√°t." }).catch((e) => {});
  }).on("searchCancel", async(queue) => {
    return await queue.textChannel?.send({ content: "T√¨m ki·∫øm b√†i h√°t b·ªã h·ªßy" }).catch((e) => {});
  }).on("searchNoResult", (message) => {
    return message.channel.send({ content: "Kh√¥ng th·ªÉ t√¨m ki·∫øm b√†i h√°t" }).catch((e) => console.log(e));
  }).on("searchResult", (message, results) => {
    let i = 0;
    return message.channel.send({ content: `**Ch·ªçn m·ªôt t√πy ch·ªçn t·ª´ b√™n d∆∞·ªõi**\n${results.map((song) => `**${++i}**. ${song.name} - \`${song.formattedDuration}\``).join("\n")}\n*Nh·∫≠p b·∫•t k·ª≥ th·ª© g√¨ kh√°c ho·∫∑c ƒë·ª£i 60 gi√¢y ƒë·ªÉ h·ªßy*` });
  });
};